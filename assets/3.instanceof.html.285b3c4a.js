import{_ as e,r as o,o as t,c,a as n,b as p,d as i,e as a}from"./app.acfc35a6.js";const l={},r=a('<h1 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h1><h2 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h2><ul><li>今天把 <code>instanceof</code> 给终结在这篇文章上，加油。</li></ul><h2 id="_1-前置知识" tabindex="-1"><a class="header-anchor" href="#_1-前置知识" aria-hidden="true">#</a> 1. 前置知识</h2><h3 id="_1-1-官方文档文档" tabindex="-1"><a class="header-anchor" href="#_1-1-官方文档文档" aria-hidden="true">#</a> 1.1 官方文档文档</h3>',5),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof",target:"_blank",rel:"noopener noreferrer"},u=a(`<h3 id="_1-2-英文解释" tabindex="-1"><a class="header-anchor" href="#_1-2-英文解释" aria-hidden="true">#</a> 1.2 英文解释：</h3><ul><li><code>instance:实例</code></li><li><code>of：属于</code></li><li><code>instanceof：实例属于</code></li></ul><h2 id="_2-正文" tabindex="-1"><a class="header-anchor" href="#_2-正文" aria-hidden="true">#</a> 2. 正文</h2><h3 id="_2-1-概念" tabindex="-1"><a class="header-anchor" href="#_2-1-概念" aria-hidden="true">#</a> 2.1 概念：</h3><p>instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p><ul><li>instanceof：实例属于。</li><li>构造函数：可以理解就是一个函数。</li><li>prototype 属性：函数上一个属性。</li><li>原型链：对象可以通过 <code>__proto__</code> 属性与上游的构造函数的原型对象连接起来，⽽上游的原型对象也有⼀个 <code>__proto__</code> ，这样就形成了原型链。</li></ul><h4 id="_2-1-1-举个例子" tabindex="-1"><a class="header-anchor" href="#_2-1-1-举个例子" aria-hidden="true">#</a> 2.1.1 举个例子:</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Foo.prototype</code></p><p>函数上有一个 <code>prototype</code> 属性，叫做这个函数的 <code>原型对象</code>;</p><p><code>a.__proto__</code></p><p>每个对象都有 <code>__proto__</code> 属性，此属性指向该对象的构造函数的<code>原型对象</code></p><h4 id="_2-1-2-个人总结" tabindex="-1"><a class="header-anchor" href="#_2-1-2-个人总结" aria-hidden="true">#</a> 2.1.2 个人总结：</h4><p>看到上述解释的概念，其实可以了解到，<code>instanceof</code>就是沿着对象<code>a</code>的<code>__proto__</code>属性，一直向上寻找<code>__proto__</code>。 如果 构造函数的原型对象 在这个链条上，返回 true。</p><h2 id="_2-2-手写一个-instancof" tabindex="-1"><a class="header-anchor" href="#_2-2-手写一个-instancof" aria-hidden="true">#</a> 2.2 手写一个 instancof</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// source instanceof左侧数据</span>
<span class="token comment">// target instanceof右侧数据</span>

<span class="token keyword">function</span> <span class="token function">copyInstanceof</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 基本数据类型以及 null 直接返回 false</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">&#39;function&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> source<span class="token punctuation">)</span> <span class="token operator">||</span> source <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>

  <span class="token comment">// getProtypeOf 是 Object 对象自带的一个方法，能够拿到参数的原型对象</span>
  <span class="token keyword">let</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查找到尽头，还没找到</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token comment">// 找到相同的原型对象</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> target<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-instanceof-作用" tabindex="-1"><a class="header-anchor" href="#_2-3-instanceof-作用" aria-hidden="true">#</a> 2.3 instanceof 作用</h2><ul><li>instanceof 主要的作用就是判断一个实例是否属于某种类型</li><li>instanceof 也可以判断一个实例是否是其父类型或者祖先类型的实例。</li></ul><h2 id="_2-4-实际案例" tabindex="-1"><a class="header-anchor" href="#_2-4-实际案例" aria-hidden="true">#</a> 2.4 实际案例</h2><p><code>1. 例如：vue源码中 判断用户是否使用 new 关键词调用的函数</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vue</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">new</span> <span class="token class-name">throw</span> <span class="token string">&#39;Vue is a constructor and should be called with the \`new\` keyword&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> End</h2><ul><li>完结。</li></ul>`,23);function k(h,v){const s=o("ExternalLinkIcon");return t(),c("div",null,[r,n("p",null,[n("a",d,[p("MDN 官方说明："),i(s)])]),u])}const f=e(l,[["render",k],["__file","3.instanceof.html.vue"]]);export{f as default};
