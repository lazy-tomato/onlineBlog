import{_ as c,r as l,o as i,c as t,a as n,b as e,d as s,e as o}from"./app.acfc35a6.js";const d={},p=n("h1",{id:"数据类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据类型","aria-hidden":"true"},"#"),e(" 数据类型")],-1),r={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures",target:"_blank",rel:"noopener noreferrer"},u=o(`<h2 id="_1-结论" tabindex="-1"><a class="header-anchor" href="#_1-结论" aria-hidden="true">#</a> 1.结论</h2><ul><li>JS 数据类型分为<code>两大类</code>及<code>八种数据类型</code>。（到目前为止）</li><li>JavaScript 是一种<strong>弱类型</strong>或者说<strong>动态</strong>语言。这意味着你不用提前声明变量的类型，在程序运行过程中，类型会被自动确定</li></ul><h2 id="_2-数据类型" tabindex="-1"><a class="header-anchor" href="#_2-数据类型" aria-hidden="true">#</a> 2.数据类型</h2><ol><li>简单（基本）类型（除对象类型（object）以外的其它任何类型定义的不可变的值（值本身无法被改变）） <ul><li><code>Boolean</code> ： true/false</li><li><code>NULL</code>：null</li><li><code>Undefined</code>:undifined</li><li><code>Number</code>:任意数值</li><li><code>BigInt</code>：大整数</li><li><code>String</code>：任意字符串</li><li><code>Symbol</code>：<strong>唯一</strong>且<strong>不可修改</strong>的原始值</li></ul></li><li>复杂（引用）类型 <ul><li><code>Object</code><ul><li><code>Function</code>:一种特别的对象（可以执行）</li><li><code>Array</code>: 一种特别的对象（数值下标，有序的）</li><li>其他</li></ul></li></ul></li></ol><h2 id="_3-简要说明" tabindex="-1"><a class="header-anchor" href="#_3-简要说明" aria-hidden="true">#</a> 3.简要说明</h2><h3 id="_3-1-boolean" tabindex="-1"><a class="header-anchor" href="#_3-1-boolean" aria-hidden="true">#</a> 3.1 Boolean</h3><p>**<code>Boolean</code>**对象是一个布尔值的对象包装器。</p><blockquote><p>通篇看下来，建议使用<code>Boolean()</code> / <code>!!</code> ； 不建议使用 <code>new Boolean()</code>，来创建一个布尔类型的值</p></blockquote><h3 id="_3-2-null" tabindex="-1"><a class="header-anchor" href="#_3-2-null" aria-hidden="true">#</a> 3.2 NULL</h3><p>表示一个不存在或者无效 object 或者地址引用。语言实现中空引用的含义各不相同。</p><p>在 JavaScript，null 是原始值之一</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment">// &quot;object&quot; (因为一些以前的原因而不是&#39;null&#39;)</span>
<span class="token keyword">typeof</span> <span class="token keyword">undefined</span> <span class="token comment">// &quot;undefined&quot;</span>
<span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token comment">// false</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token comment">// true</span>
<span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token comment">// true</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token comment">// true</span>
<span class="token operator">!</span><span class="token keyword">null</span> <span class="token comment">//true</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-undefined" tabindex="-1"><a class="header-anchor" href="#_3-3-undefined" aria-hidden="true">#</a> 3.3 Undefined</h3><p>一个没有被赋值的变量会有个默认值 <code>undefined</code>；</p><p>函数不设置返回值，默认返回 <code>undefined</code></p><blockquote><ul><li>注意 <code>undefined</code>在 js 中不是保留字符，但是我们应当尽量避免使用 <code>undefined</code>做标识符</li><li><code>undefined</code>和<code>undefined</code> 进行比较必须使用全等才会为 true;</li><li>自 es5 标准，<code>undefined</code>是一个不能被配置（non-configurable），不能被重写（non-writable）的属性。</li></ul></blockquote><h3 id="_3-4-number" tabindex="-1"><a class="header-anchor" href="#_3-4-number" aria-hidden="true">#</a> 3.4 <strong>Number</strong></h3><ul><li>JavaScript 的<code>Number</code>类型为双精度 IEEE 754 64 位浮点类型。</li></ul><ul><li><p>如果参数无法被转换为数字，则返回 <code>NaN</code>。</p><blockquote><p>会生成<code>NaN</code>的场景:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;100a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>

<span class="token keyword">var</span> tomato
<span class="token function">Number</span><span class="token punctuation">(</span>tomato<span class="token punctuation">)</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li><li><p>在非构造器上下文中 (如：没有 <code>new</code>操作符)，<code>Number</code> 能被用来执行类型转换。</p></li><li><p>调用函数 <code>BigInt()</code>（但不包含 <code>new</code> 运算符）并传递一个整数值或字符串值</p></li></ul><h3 id="_3-5-bigint" tabindex="-1"><a class="header-anchor" href="#_3-5-bigint" aria-hidden="true">#</a> 3.5 BigInt</h3><p><strong><code>BigInt</code></strong> 是一种内置对象，它提供了一种方法来表示大于 <code>2^53 - 1</code> 的整数。这原本是 Javascript 中可以用<code>Number</code>表示的最大数字。<strong><code>BigInt</code></strong> 可以表示任意大的整数。</p><h4 id="声明的方法" tabindex="-1"><a class="header-anchor" href="#声明的方法" aria-hidden="true">#</a> 声明的方法</h4><ul><li><p>可以用在一个整数字面量后面加 <code>n</code> 的方式定义一个 <code>BigInt</code>，例如<code>10n</code></p></li><li><p>调用函数 <code>BigInt()</code>（但不包含 <code>new</code> 运算符）并传递一个整数值或字符串值。例如<code>BigInt(123)</code> ==&gt; <code>123n</code></p></li><li><p><code>BigInt</code> 和 <code>Number</code>不是严格<code>===</code>相等的，但是宽松<code>==</code>相等的。</p></li><li><p>建议仅在值可能大于 2^53 时使用 <code>BigInt</code> 类型，并且不在两种类型之间进行相互转换。</p></li><li><p>对任何 <code>BigInt</code> 值使用 <code>JSON.stringify()</code> 都会引发 <code>TypeError</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 解决办法</span>
<span class="token class-name">BigInt</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toJSON</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-6-string" tabindex="-1"><a class="header-anchor" href="#_3-6-string" aria-hidden="true">#</a> 3.6 String</h3><p><strong><code>String</code></strong> 全局对象是一个用于字符串或一个字符序列的构造函数。</p><h3 id="_3-7-symbol" tabindex="-1"><a class="header-anchor" href="#_3-7-symbol" aria-hidden="true">#</a> 3.7 Symbol</h3><ul><li><p>英译：符号</p></li><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> symbol1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 不需要使用 new关键词</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>可生成唯一的 key，用于对象声明一个唯一的属性名</p></li></ul><h2 id="_3-8-object" tabindex="-1"><a class="header-anchor" href="#_3-8-object" aria-hidden="true">#</a> 3.8 Object</h2>`,28),k={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Identifier",target:"_blank",rel:"noopener noreferrer"},h=o("<p>已知的对象</p><ol><li><p>数据属性</p></li><li><p>访问器属性</p></li><li><p>日期</p></li><li><p>数组</p></li><li><p>类数组</p></li><li><p>Maps</p></li><li><p>Sets</p></li><li><p>WeakPaps</p></li><li><p>WeakSets</p></li><li><p>JSON</p></li><li><p>标准内置对象</p></li></ol>",2);function m(b,v){const a=l("ExternalLinkIcon");return i(),t("div",null,[p,n("p",null,[n("a",r,[e("MDN 官方文档地址"),s(a)])]),u,n("p",null,[e("在计算机科学中, 对象（object）是指内存中的可以被"),n("a",k,[e("标识符"),s(a)]),e("引用的一块区域。")]),h])}const f=c(d,[["render",m],["__file","1.数据类型.html.vue"]]);export{f as default};
