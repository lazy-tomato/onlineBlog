import{_ as p,r as o,o as c,c as i,a as n,b as s,d as e,e as t}from"./app.acfc35a6.js";const l="/onlineBlog/assets/image-20221215101216507.42816af2.png",u="/onlineBlog/assets/image-20221215101953283.6f23cc88.png",r={},d=t(`<h1 id="_01-promise-基础知识" tabindex="-1"><a class="header-anchor" href="#_01-promise-基础知识" aria-hidden="true">#</a> 01.Promise 基础知识</h1><h2 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h2><ul><li><code>Promise</code> 中文释义： <em>承诺</em>。</li><li><code>Promise</code> 使用的非常广泛，不仅要掌握，而且还要非常熟练。</li></ul><h2 id="_1-promise-是什么" tabindex="-1"><a class="header-anchor" href="#_1-promise-是什么" aria-hidden="true">#</a> 1.Promise 是什么？</h2><h3 id="_1-1-概念" tabindex="-1"><a class="header-anchor" href="#_1-1-概念" aria-hidden="true">#</a> 1.1 概念</h3><p><code>Promise</code> 是<strong>异步编程</strong>的一种解决方案，比传统的解决方案：<em>&quot;回调函数和事件&quot;</em> 更合理和更强大。所谓 <code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。</p><h3 id="_1-2-粗略的理解一下-promise" tabindex="-1"><a class="header-anchor" href="#_1-2-粗略的理解一下-promise" aria-hidden="true">#</a> 1.2 粗略的理解一下 Promise</h3><p><code>抽象理解</code></p><ul><li><p><code>Promise</code> 是一门新的技术(ES6 规范)</p></li><li><p><code>Promise</code> 是 JS 中进行异步编程的新解决方案</p><blockquote><p>备注：旧方案是单纯使用回调函数</p></blockquote></li></ul><p><code>具体表达</code></p><ul><li>从语法上来说: <code>Promise</code> 是一个构造函数</li><li>从功能上来说: <code>Promise</code> 对象用来封装一个异步操作并可以获取其成功/ 失败的结果值</li></ul><h2 id="_2-为什么要是用-promise" tabindex="-1"><a class="header-anchor" href="#_2-为什么要是用-promise" aria-hidden="true">#</a> 2.为什么要是用 Promise?</h2><h3 id="_2-1-异步编程的常见场景" tabindex="-1"><a class="header-anchor" href="#_2-1-异步编程的常见场景" aria-hidden="true">#</a> 2.1 异步编程的常见场景</h3><ol><li>定时器</li><li><code>ajax</code>请求</li><li><code>nodejs</code>的文件操作模块(fs 模块) ==&gt;读取文件时是异步的。</li></ol><h4 id="_2-1-1-定时器" tabindex="-1"><a class="header-anchor" href="#_2-1-1-定时器" aria-hidden="true">#</a> 2.1.1 定时器</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 浏览器环境</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1.定时器&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-2-ajax-请求" tabindex="-1"><a class="header-anchor" href="#_2-1-2-ajax-请求" aria-hidden="true">#</a> 2.1.2 ajax 请求</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 浏览器环境</span>
<span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">)</span>

xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2.ajax请求&#39;</span><span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;请求失败: status: &#39;</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-3-nodejs-中读取文件" tabindex="-1"><a class="header-anchor" href="#_2-1-3-nodejs-中读取文件" aria-hidden="true">#</a> 2.1.3 NodeJs 中读取文件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// nodejs环境</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;1.promise.md&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果出错 则抛出错误</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
  <span class="token comment">//输出文件内容</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3.nodejs中读取文件&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-旧的处理方案-单纯使用回调函数" tabindex="-1"><a class="header-anchor" href="#_2-2-旧的处理方案-单纯使用回调函数" aria-hidden="true">#</a> 2.2 旧的处理方案（单纯使用回调函数）</h3><p>**1》**就以读取文件为例，读取文件，然后注册一个回调函数，用以处理读取完文件后的操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;1.promise.md&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果出错 则抛出错误</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
  <span class="token comment">//输出文件内容</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**2》**如果希望，在读取完第一个文件之后，再读取第二个文件，依次类推，读取多个文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 1.读取第一个文件</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;1.promise1.md&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 2.读取第二个文件</span>
  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;1.promise2.md&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// 3.读取第三个文件</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;1.promise3.md&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于需求规定，必须等前一个文件读取完，再读取后一个文件。</p><p>所以目前只能把读取后面文件的代码，写在前一个读取文件的回调函数中。</p><p>**4》**写到这里，有这么几个问题：</p><ol><li><p>演示的代码读取的是三个文件，如果需要读取的文件数量很多怎么办？</p><blockquote><ul><li><p>如果文件数量很多，回调函数中嵌套的大括号，层级会非常多。</p></li><li><p>代码的结构就类似 <code>&gt;</code> 这种结构，这就叫做回调地狱。</p></li></ul></blockquote></li><li><p>如果读取过程中某一个地方出错了，如何快速处理异常？</p></li><li><p>回调函数必须提前写好，不是很方便。</p></li></ol><h3 id="_2-3-为什么使用-promise" tabindex="-1"><a class="header-anchor" href="#_2-3-为什么使用-promise" aria-hidden="true">#</a> 2.3 为什么使用 Promise？</h3><p>**1-**指定回调函数的方式更加灵活</p><ul><li>旧的: 必须在启动异步任务前指定。</li><li><code>Promie</code> : 启动异步任务 =&gt; 返回 <code>Promie</code> 对象 =&gt; 给 <code>Promie</code> 对象绑定回调函数(甚至可以在异步任务结束后指定/多个)。</li></ul><p>**2-**支持链式调用, 可以解决回调地狱问题</p><ul><li>旧的：回调地狱，不便于阅读，不便于异常处理。</li><li><code>Promie</code> 链式调用，来解决回调地狱问题。</li></ul><p><strong>3-</strong><code>async awiat</code></p><ul><li>Promise 只是简单的改变格式，并没有彻底解决上面的问题真正要解决上述问题，<code>promise + async/await</code>实现异步传同步。 <blockquote><p><em><code>async/await</code> 在以后的 <code>await</code>和<code>async</code>的博客再细说。</em></p></blockquote></li></ul><h2 id="_3-promise-怎么用" tabindex="-1"><a class="header-anchor" href="#_3-promise-怎么用" aria-hidden="true">#</a> 3. Promise 怎么用?</h2><h3 id="_3-1-打印一下" tabindex="-1"><a class="header-anchor" href="#_3-1-打印一下" aria-hidden="true">#</a> 3.1 打印一下！</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 打印出来 Promise 它是一个方法，我们换个方式继续打印</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span>

<span class="token comment">// \`console.dir\` 可以打印一个对象所有的属性和方法。  （ps:由上面的console.log，我们知道它是一个函数。函数本身也是一个特殊的对象，我们打印一下看看它有哪些属性和方法）</span>
console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+l+'" alt="image-20221215101216507"></p><p>①：可以得知 <code>Promise</code> 本身是一个函数； ②：这个函数对象本身有一些自己的方法，例如：（<code>all</code>,<code>race</code>,<code>resolve</code>,<code>reject</code>） ③：它的 <code>portotype</code> (显式原型)上除了默认的 <code>constructor</code>，还有一些独有的方法，例如：(<code>then</code>，<code>catch</code>，<code>finally</code>)</p><h3 id="_3-2-mdn-官网" tabindex="-1"><a class="header-anchor" href="#_3-2-mdn-官网" aria-hidden="true">#</a> 3.2 MDN 官网</h3>',42),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise",target:"_blank",rel:"noopener noreferrer"},m=n("h3",{id:"_3-3-其他教程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-3-其他教程","aria-hidden":"true"},"#"),s(" 3.3 其他教程")],-1),v={href:"https://es6.ruanyifeng.com/#docs/promise",target:"_blank",rel:"noopener noreferrer"},b=t(`<h3 id="_3-4-开始使用" tabindex="-1"><a class="header-anchor" href="#_3-4-开始使用" aria-hidden="true">#</a> 3.4 开始使用</h3><p>查看了资料，了解了 <code>Promise</code> 的基本用法，现在来动手尝试一下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... some code</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* 异步操作成功 */</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>解读一下上面的代码</code></p><ol><li><code>Promise</code> 是一个函数，通过 <code>new</code> 关键词实例化使用。</li><li><code>Promise</code> 实例化时，传入一个<strong>匿名函数</strong>.</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>
  <span class="token comment">// 1. new Promise的时候，传入一个匿名函数</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 2.这里面可以做一些逻辑处理 同步异步皆可</span>
    <span class="token comment">// ... some code</span>
    <span class="token comment">// if (/* 异步操作成功 */) {</span>
    <span class="token comment">//     resolve(value);</span>
    <span class="token comment">// } else {</span>
    <span class="token comment">//     reject(error);</span>
    <span class="token comment">// }</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>传入的匿名函数，有两个形参，一个 <code>resolve</code> ，一个 <code>reject</code>。</p><blockquote><ul><li>代码中是如何使用这两个形参的？</li><li>直接在这两个形参后面加了一对括号，加了括号代表执行，也就是说这两个形参是函数。</li><li>这两个函数还可以接受，传入了实参 <code>value</code>、<code>error</code></li></ul></blockquote></li><li><p>那我们把代码改成这样的，去运行一下尝试一下。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 依据构造函数：Promise,new 一个实例 p</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>
  <span class="token comment">// 2.在 new Promise的时候，传入了一个匿名函数作为参数</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 3.匿名函数的参数有什么用，这里执行一下它</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;lazy&#39;</span><span class="token punctuation">)</span>

    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;tomato&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;p是什么：&#39;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>运行截图</li></ol><p><img src="`+u+`" alt="image-20221215101953283"></p><ol start="5"><li>截图中的这个<code>[[PromiseState]]</code>是什么？</li></ol><ul><li><p>双方括号括起来的属性，表示 JS 中的一个内部属性，不能在代码中直接访问。</p></li><li><p><code>[[PromiseState]]</code> 存储的是这个 <code>Promise</code> 实例的状态。</p></li></ul><h3 id="_3-5-p-promise-实例-的状态" tabindex="-1"><a class="header-anchor" href="#_3-5-p-promise-实例-的状态" aria-hidden="true">#</a> 3.5 p(Promise 实例)的状态</h3><p><strong><code>[[PromiseState]]</code> 存储的是这个 <code>Promise</code> 实例的状态。</strong></p><ol><li><p>实例对象 p 中的一个属性 <code>[[PromiseState]]</code>，它的值有三种情况：</p><ol><li><p><code>pending</code> 未决定的；</p></li><li><p><code>resolved</code> / <code>fullfilled</code> 成功；</p></li><li><p><code>rejected</code> 失败；</p></li></ol><blockquote><p><code> State =&gt; 状态</code>，<code>PromiseState=&gt; Promise的状态</code></p></blockquote></li><li><p>实例对象 p(<code>Promise</code> 实例)的状态改变有哪几种情况?</p><ol><li>由默认的 <code>pending</code> 变为 <code>resolved</code></li><li>由默认的 <code>pending</code> 变为 <code>rejected</code><blockquote><ul><li><p>注意 <code>Promise</code>实例的状态，只有这两种情况 。</p></li><li><p>而且 一个 <code>Promise</code> 对象状态只能改变一次，无论变为成功还是失败, 都会有一个结果数据。</p></li><li><p>成功的结果数据一般称为 value, 失败的结果数据一般称为 reason。</p></li></ul></blockquote></li></ol></li><li><p>如何改变实例对象 p(<code>Promise</code> 实例) 的状态 在<code>new Promise()</code>传入的匿名函数中，以下情况，会改变实例对象的状态。</p><ul><li><p>调用<code>resolve(value)</code>: 如果当前状态是 <code>pending</code> 就会变为 <code>resolved</code>；</p></li><li><p>调用<code>reject(reason)</code>: 如果当前状态是 <code>pending</code> 就会变为 <code>rejected；</code></p></li><li><p>抛出异常: 如果当前状态是 <code>pending</code> 就会变为 <code>rejected</code>；</p></li></ul></li></ol><h3 id="_3-6-实例的-then-方法" tabindex="-1"><a class="header-anchor" href="#_3-6-实例的-then-方法" aria-hidden="true">#</a> 3.6 实例的 <code>.then()</code> 方法</h3><p>实例的<code>then</code>方法可以接受两个回调函数作为参数。第一个回调函数是 <code>Promise</code> 对象的状态变为 <code>resolved</code> 时调用，第二个回调函数是 <code>Promise</code> 对象的状态变为 <code>rejected</code> 时调用。</p><h3 id="_3-7-开始使用-promise" tabindex="-1"><a class="header-anchor" href="#_3-7-开始使用-promise" aria-hidden="true">#</a> 3.7 开始使用 Promise</h3><blockquote><p>说了那么多，写一个基本的用法</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 说下执行顺序</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1</span>
  <span class="token comment">// 2</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;lazy&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;tomato&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 实例的状态已经改变了，这里不会再改变状态了</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 5</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment">// 1</span>
<span class="token comment">// lazy</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-8-异步下的-promise" tabindex="-1"><a class="header-anchor" href="#_3-8-异步下的-promise" aria-hidden="true">#</a> 3.8 异步下的 Promise</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
  <span class="token comment">// 3 (执行setTimeout)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;tomato&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 5</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 4</span>
p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token comment">// 6</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment">// hello</span>
<span class="token comment">// &#39;1&#39;  tomato</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-promise-实例上的方法" tabindex="-1"><a class="header-anchor" href="#_4-promise-实例上的方法" aria-hidden="true">#</a> 4.promise 实例上的方法</h2><h3 id="_4-1-then" tabindex="-1"><a class="header-anchor" href="#_4-1-then" aria-hidden="true">#</a> 4.1 then</h3><p><code>代码示例</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;tomato&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment">// 1 tomato</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>注意事项</code></p><blockquote><ol><li><code>then</code>方法可以接受两个回调函数作为参数。 <ul><li>第一个回调函数是 Promise 对象的状态变为<code>resolved</code>时调用；</li><li>第二个回调函数是 Promise 对象的状态变为<code>rejected</code>时调用。</li></ul></li><li>两个函数都是可选的，不一定要提供。</li><li><code>then</code>方法返回的是一个<strong>新的 Promise 实例</strong>。</li><li>绝大多数实际使用的时候，主要处理成功的回调，错误的回调统一由后续的 <code>catch</code> 处理。</li></ol></blockquote><h3 id="_4-2-catch" tabindex="-1"><a class="header-anchor" href="#_4-2-catch" aria-hidden="true">#</a> 4.2 catch</h3><p><code>代码示例</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;tomato&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// tomato</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>注意事项</code></p><blockquote><ol><li><code>catch</code>方法可以接受一个回调函数作为参数。</li><li>回调函数触发的方式有：</li></ol><ul><li><p><code>Promise</code> 对象的状态变为 <code>rejected</code> 时调用。</p></li><li><p><code>then()</code> 方法指定的回调函数，如果运行中抛出错误，也会被 <code>catch()</code> 方法捕获。</p></li><li><p>new 实例中的匿名函数运行报错，也会进 <code>catch</code>。</p></li></ul><ol start="3"><li><code>catch</code> 方法返回的也是一个<strong>新的 <code>Promise</code> 实例</strong></li></ol></blockquote><h3 id="_4-3-finally" tabindex="-1"><a class="header-anchor" href="#_4-3-finally" aria-hidden="true">#</a> 4.3 finally</h3><p><code>代码</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</span>
promise
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>···<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>···<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>···<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// finally本质上是then方法的特例。</span>
promise
<span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 语句</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 等同于</span>
promise
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 语句</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 语句</span>
    <span class="token keyword">throw</span> error<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-promise-构造函数上的方法" tabindex="-1"><a class="header-anchor" href="#_5-promise-构造函数上的方法" aria-hidden="true">#</a> 5.Promise 构造函数上的方法</h2><h3 id="_1-promise-all" tabindex="-1"><a class="header-anchor" href="#_1-promise-all" aria-hidden="true">#</a> 1. Promise.all()</h3><p>Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，Promise.all()方法接受一个数组作为参数，p1、p2、p3 都是 Promise 实例，如果不是，就会先调用下面讲到的 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。另外，Promise.all()方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。</p><p>p 的状态由 p1、p2、p3 决定，分成两种情况。</p><p>（1）只有 p1、p2、p3 的状态都变成 fulfilled，p 的状态才会变成 fulfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。</p><p>（2）只要 p1、p2、p3 之中有一个被 rejected，p 的状态就变成 rejected，此时第一个被 reject 的实例的返回值，会传递给 p 的回调函数。</p><blockquote><p><strong>简单总结:</strong></p><ol><li>接收有 Iterator 接口的数据作为参数，例如数组。</li><li>参数中的每一项，都是一个 <code>Promise</code> 实例。（不是 <code>Promise</code> 实例的，会被转换为<code>Promise</code> 实例）</li><li>当所有的项都成功的时候，Promise.all() 才返回包含成功数据的一个数组。</li><li>只要有一项失败，Promise.all() 返回失败。</li></ol></blockquote><h3 id="_2-promise-race" tabindex="-1"><a class="header-anchor" href="#_2-promise-race" aria-hidden="true">#</a> 2. Promise.race()</h3><p>Promise.race()方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;request timeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Promise.race()方法的参数与 Promise.all()方法一样，如果不是 Promise 实例，就会先调用下面讲到的 Promise.resolve()方法，将参数转为 Promise 实例，再进一步处理。 只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 p 的回调函数。</p><blockquote><p><strong>简单总结:</strong></p><ol><li>接收有 Iterator 接口的数据作为参数，例如数组。</li><li>参数中的每一项，都是一个 <code>Promise</code> 实例。（不是 <code>Promise</code> 实例的，会被转换为<code>Promise</code> 实例）</li><li>只要有一项状态改变，Promise.race() 返回对应状态。</li><li><code>race</code> 有竞速的意思，也就是多个异步事件，取返回最快的事件。</li></ol></blockquote><h3 id="_3-promise-allsettled" tabindex="-1"><a class="header-anchor" href="#_3-promise-allsettled" aria-hidden="true">#</a> 3. Promise.allSettled()</h3><p>Promise.all()方法只适合所有异步操作都成功的情况，如果有一个操作失败，就无法满足要求。</p><p>为了解决这个问题，ES2020 引入了 Promise.allSettled()方法，用来确定一组异步操作是否都结束了（不管成功或失败）。所以，它的名字叫做”Settled“，包含了”fulfilled“和”rejected“两种情况。</p><p>返回值的状态只可能为成功;</p><p>返回值的结果呢是根据传递来的数据依次排序的，其次成功则 status=fulfilled，失败则 status=rejected</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">tomato</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
  <span class="token comment">/* 
            PromiseState:&#39;fulfilled&#39;
            PromiseResult:[
                {
                    &quot;status&quot;: &quot;fulfilled&quot;,
                    &quot;value&quot;: &quot;2&quot;
                },
                {
                    &quot;status&quot;: &quot;rejected&quot;,
                    &quot;reason&quot;: &quot;error&quot;
                }
            ]
            */</span>
<span class="token punctuation">}</span>

<span class="token function">tomato</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>简单总结:</strong></p><ol><li>接收有 Iterator 接口的数据作为参数，例如数组。</li><li>参数中的每一项，都是一个 <code>Promise</code> 实例。（不是 <code>Promise</code> 实例的，会被转换为<code>Promise</code> 实例）</li><li>当一组 <code>Promise</code> 都执行完毕了，才会返回一个成功的 <code>Pormise</code>，对应值，是包含返回结果的数组，数组有成功也有失败。</li></ol></blockquote><h3 id="_4-promise-any" tabindex="-1"><a class="header-anchor" href="#_4-promise-any" aria-hidden="true">#</a> 4. Promise.any()</h3><p>ES2021 引入了 Promise.any()方法。该方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。</p><p>只要参数实例有一个变成 fulfilled 状态，包装实例就会变成 fulfilled 状态；如果所有参数实例都变成 rejected 状态，包装实例就会变成 rejected 状态。</p><p>Promise.any()跟 Promise.race()方法很像，只有一点不同，就是 Promise.any()不会因为某个 Promise 变成 rejected 状态而结束，必须等到所有参数 Promise 变成 rejected 状态才会结束。</p><blockquote><p>取第一个成功的 <code>Promise</code></p></blockquote><h3 id="_5-promise-resolve" tabindex="-1"><a class="header-anchor" href="#_5-promise-resolve" aria-hidden="true">#</a> 5. Promise.resolve()</h3><p>作用:</p><p>将现有对象转为 Promise 对象</p><p>Promise.resolve()方法的参数分成四种情况。</p><p>（1）参数是一个 Promise 实例</p><p>如果参数是 Promise 实例，那么 Promise.resolve 将不做任何修改、原封不动地返回这个实例。</p><p>（2）参数是一个 thenable 对象</p><p>thenable 对象指的是具有 then 方法的对象，比如下面这个对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> thenable <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">then</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Promise.resolve()方法会将这个对象转为 Promise 对象，然后就立即执行 thenable 对象的 then()方法。</p><p>（3）参数不是具有 then()方法的对象，或根本就不是对象</p><p>如果参数是一个原始值，或者是一个不具有 then()方法的对象，则 Promise.resolve()方法返回一个新的 Promise 对象，状态为 resolved。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// Hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）不带有任何参数 Promise.resolve()方法允许调用时不带参数，直接返回一个 resolved 状态的 Promise 对象。 所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用 Promise.resolve()方法。</p><h3 id="_6-promise-reject" tabindex="-1"><a class="header-anchor" href="#_6-promise-reject" aria-hidden="true">#</a> 6. Promise.reject()</h3><p>Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为 rejected。 Promise.reject()方法的参数，<strong>会原封不动地作为 reject 的理由，变成后续方法的参数。</strong></p><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> end</h2><ul><li>加油</li></ul>`,80);function h(g,f){const a=o("ExternalLinkIcon");return c(),i("div",null,[d,n("p",null,[n("a",k,[s("MDN 官网-Promise"),e(a)])]),m,n("p",null,[n("a",v,[s("阮一峰的 ES6_Promise 教程"),e(a)])]),b])}const j=p(r,[["render",h],["__file","01.Promise基础知识.html.vue"]]);export{j as default};
