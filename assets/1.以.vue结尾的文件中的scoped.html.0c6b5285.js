import{_ as t,r as e,o as p,c,a,b as o,d as l,e as s}from"./app.acfc35a6.js";const i="/onlineBlog/assets/image-20221226172937421.c3209f31.png",d="/onlineBlog/assets/image-20221226173054562.9fa124a9.png",u={},r=s(`<h1 id="_1-vue-文件中的-scoped-属性" tabindex="-1"><a class="header-anchor" href="#_1-vue-文件中的-scoped-属性" aria-hidden="true">#</a> 1.vue 文件中的 scoped 属性</h1><h2 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h2><ul><li><p>在 <code>vue</code> 文件中，我们经常会见到，在 <code>&lt;style&gt;&lt;/style&gt;</code> 标签上存在一个 <code>scoped</code> 属性。</p></li><li><p>通过这个 <code>scoped</code> 属性，我们可以达到组件之间样式隔离的目的。但是它本质原理的是什么的？</p></li><li><p><strong>研究一下</strong>。</p></li></ul><h2 id="正文" tabindex="-1"><a class="header-anchor" href="#正文" aria-hidden="true">#</a> 正文</h2><h3 id="_1-英文翻译" tabindex="-1"><a class="header-anchor" href="#_1-英文翻译" aria-hidden="true">#</a> 1. 英文翻译</h3><p><code>scoped</code>: 作用域内的</p><blockquote><p>可以理解限制作用域的意思。</p></blockquote><h3 id="_2-使用-scoped-前后差异" tabindex="-1"><a class="header-anchor" href="#_2-使用-scoped-前后差异" aria-hidden="true">#</a> 2. 使用 <code> scoped</code> 前后差异</h3><p>对比一下，使用 <code>scoped</code> 属性前后，页面的差异。</p><p><code>添加scoped</code></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>我是番茄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.lazy</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+i+`" alt="image-20221226172937421"></p><p><code>不添加scoped</code></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>我是番茄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.lazy</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+'" alt="image-20221226173054562"></p><p>查看上述的内容，我们可以很明显的发现，使用了 <code>scoped</code> 属性，会在元素的标签上添加 <code>data-v-7ba5bd90</code> 属性。与此同时，还会在对应样式选择器上添加<code>data-v-7ba5bd90</code>，以此来达到样式隔离的目的。</p><blockquote><p><code>data-v-7ba5bd90</code>：是 html5 新增的自定义属性。</p><p><code>data-</code>：是自定义属性的前缀。</p><p><code>7ba5bd90</code>：是随机的 8 位 hash 值。</p></blockquote><h3 id="_3-自定义属性如何实现" tabindex="-1"><a class="header-anchor" href="#_3-自定义属性如何实现" aria-hidden="true">#</a> 3. 自定义属性如何实现？</h3><p><strong>通过 <code>vue-loader</code> 实现</strong></p>',19),k={href:"https://juejin.cn/post/7098569051860893709#heading-1",target:"_blank",rel:"noopener noreferrer"},v=s(`<h3 id="_4-修改组件库的样式" tabindex="-1"><a class="header-anchor" href="#_4-修改组件库的样式" aria-hidden="true">#</a> 4. 修改组件库的样式</h3><p>日常中的开发，修改组件库的样式是很常见的需求。</p><p>例如修改<code>element-ui</code> 的默认样式。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>stylus的样式穿透 使用&gt;&gt;&gt; 

sass和less的样式穿透 使用/deep/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function g(m,h){const n=e("ExternalLinkIcon");return p(),c("div",null,[r,a("p",null,[a("a",k,[o("相关文章，点击这里："),l(n)])]),v])}const _=t(u,[["render",g],["__file","1.以.vue结尾的文件中的scoped.html.vue"]]);export{_ as default};
