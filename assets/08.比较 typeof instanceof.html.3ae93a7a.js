import{_ as a,r as i,o as l,c as r,a as e,b as n,d as o,e as s}from"./app.acfc35a6.js";const c={},d=e("h1",{id:"_8-比较-typeof-instanceof",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_8-比较-typeof-instanceof","aria-hidden":"true"},"#"),n(" 8.比较 typeof instanceof")],-1),h=e("h2",{id:"基础概念",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#基础概念","aria-hidden":"true"},"#"),n(" 基础概念")],-1),f=e("p",null,"既然要做比较那肯定需要了解两者是什么？再做比较",-1),_={href:"https://blog.csdn.net/wswq2505655377/article/details/128104732",target:"_blank",rel:"noopener noreferrer"},p={href:"https://blog.csdn.net/wswq2505655377/article/details/128120886",target:"_blank",rel:"noopener noreferrer"},u=s('<h2 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点" aria-hidden="true">#</a> 相同点</h2><ol><li>typeof 与 instanceof 都是判断数据类型的方法</li></ol><h2 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点" aria-hidden="true">#</a> 不同点</h2><ol><li>typeof 会返回一个变量的基本类型，instanceof 返回的是一个布尔值</li><li>instanceof 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</li><li>而 typeof 也存在弊端，它虽然可以判断基础数据类型（null 除外），但是引用数据类型中，除了 function 类型以外，其他的也无法判断</li></ol><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> End</h2><p>文章的最后我说说我自己总结的两者的相同和区别。</p><p>相同：</p><ol><li>都是小写的；</li><li>都可以用来判断数据的类型；</li></ol><p>不同：</p><ol><li>typeof 主要用于判断基础类型数据的数据类型。instanceof 主要是用于判断复杂类型数据的数据类型。</li><li>typeof，除了 es6 中 <code>let,const</code> 的暂时性死区，其他情况永不报错，返回一个字符串。</li><li>instanceof 不能正确判断基础类型的数据，返回的是一个布尔值。</li></ol>',10);function x(y,b){const t=i("ExternalLinkIcon");return l(),r("div",null,[d,h,f,e("ul",null,[e("li",null,[n("typeof 基础知识： "),e("a",_,[n("点击这里"),o(t)])]),e("li",null,[n("instanceof 基础知识： "),e("a",p,[n("点击这里"),o(t)])])]),u])}const k=a(c,[["render",x],["__file","08.比较 typeof instanceof.html.vue"]]);export{k as default};
