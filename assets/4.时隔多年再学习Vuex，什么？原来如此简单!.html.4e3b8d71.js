import{_ as p,r as o,o as c,c as i,a as s,b as n,d as e,e as t}from"./app.acfc35a6.js";const l="/onlineBlog/assets/image-20230216205020993.78461fa1.png",u="/onlineBlog/assets/image-20230216205913776.4afd75cf.png",r="/onlineBlog/assets/image-20230216210816964.d91cdb28.png",d="/onlineBlog/assets/image-20230217210923321.f5102199.png",k={},v=t('<h1 id="时隔多年再学习vuex-什么-原来如此简单" tabindex="-1"><a class="header-anchor" href="#时隔多年再学习vuex-什么-原来如此简单" aria-hidden="true">#</a> 时隔多年再学习Vuex，什么？原来如此简单!</h1><h2 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h2><ol><li>写 <code>Vue</code> 写了好多年了，少不了和 <code>Vuex</code> 打交道。虽然使用它的次数非常频繁，但是潜意识里总觉得这东西很难，导致遇到与之相关的问题就容易慌张。</li><li>时至今日，升级版新款 “大菠萝” <code>pinia</code> 都已经推出了，我居然还是对 <code>Vuex</code> 掌握不透彻。这不太好吧？</li><li>那么今天就让这个问题，消失在这篇博客吧！</li><li>作者：lazy_tomato</li><li>编写时间：<em>2023/02/16-11/16</em></li></ol><h2 id="官网" tabindex="-1"><a class="header-anchor" href="#官网" aria-hidden="true">#</a> 官网</h2>',4),m={href:"https://v3.vuex.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"Vuex",-1),h=t('<blockquote><p>上述链接中 <code>Vuex</code> 版本为 <code>3.x</code>，后续讲解的内容均为此版本。</p></blockquote><p>我后续会依托官方文档，讲讲我对 <code>Vuex</code> 的理解。</p><p><strong>本文大部分内容均为我个人的理解，难免有些表述不当之处，参考即可</strong>。</p><h2 id="一-vuex-是什么" tabindex="-1"><a class="header-anchor" href="#一-vuex-是什么" aria-hidden="true">#</a> 一. <code>Vuex</code> 是什么？</h2><h3 id="_1-vuex是什么" tabindex="-1"><a class="header-anchor" href="#_1-vuex是什么" aria-hidden="true">#</a> 1.Vuex是什么？</h3><p><img src="'+l+'" alt="image-20230216205020993"></p><p>学习一个东西，首先我们要知道这东西是什么，先来看看官方文档对它的说明：</p><p><code>Vuex</code> 是一个专为 <code>Vue.js</code> 应用程序开发的<strong>状态管理模式</strong>。</p><ul><li><p>状态：状态可以理解为data中的数据；</p></li><li><p>管理：对数据进行管理；</p></li><li><p>模式：可以理解为是一种解决方案；</p></li></ul><p>所以官方文档的话，可以理解为：</p><p><strong><code>Vuex</code> 是一个专为 <code>Vue.js</code> 应用程序开发管理 <code>data</code> 中数据的一个解决方案？</strong></p><h3 id="_2-为什么要使用-vuex" tabindex="-1"><a class="header-anchor" href="#_2-为什么要使用-vuex" aria-hidden="true">#</a> 2.为什么要使用 <code>Vuex</code> ?</h3><p><img src="'+u+'" alt="image-20230216205913776"></p><p>官方文档已经给了我们答案：</p><ul><li>多个视图依赖于同一状态。传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。</li><li>来自不同视图的行为需要变更同一状态。我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。</li></ul><p>用我自己的理解来表达：</p><ul><li>多个组件依赖同一个数据，这就涉及到组件之间的数据传参了，如果组件的层级略微复杂，数据的传递会很痛苦。</li><li>多个组件同时变更一个数据，虽然数据是同一个，但是会有很多无用的拷贝。</li></ul><h3 id="_3-问题2中的哪些痛点的数据有哪些呢-能列举一下吗" tabindex="-1"><a class="header-anchor" href="#_3-问题2中的哪些痛点的数据有哪些呢-能列举一下吗" aria-hidden="true">#</a> 3. 问题<code>2</code>中的哪些痛点的数据有哪些呢，能列举一下吗？</h3><p>例如：</p><ul><li><p>一个网页版的后台管理系统，用户的信息，肯定是很多地方都会使用到的，往往，多个组件都会需要读取这个数据。</p></li><li><p>一个电商的网站，有一个购物车的功能，购物车存储的信息，可能很多组件都会去变更，</p></li></ul><h3 id="_4-vuex-中设计的思想" tabindex="-1"><a class="header-anchor" href="#_4-vuex-中设计的思想" aria-hidden="true">#</a> 4. <code>Vuex</code> 中设计的思想？</h3><p><img src="'+r+'" alt="image-20230216210816964"></p>',22),g=s("code",null,"Vuex",-1),x={href:"https://facebook.github.io/flux/docs/overview",target:"_blank",rel:"noopener noreferrer"},y={href:"http://redux.js.org/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://guide.elm-lang.org/architecture/",target:"_blank",rel:"noopener noreferrer"},f=t(`<blockquote><p>这句话介绍了 <code>Vuex</code> 借鉴的思想来源于哪里</p></blockquote><p><code>Vuex</code> 是专门为 <code>Vue.js</code> 设计的状态管理库，以利用 <code>Vue.js</code> 的细粒度数据响应机制来进行高效的状态更新。</p><blockquote><p>这里介绍了 <code>Vuex</code> 区别于其他库，有哪些特点：更贴合 <code>Vue.js</code> 的细粒度数据响应机制。（<code>Vue</code>响应式的颗粒度精确到对象上每一个属性的变化）</p></blockquote><p>把组件的共享状态抽取出来，以一个全局单例模式管理。在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！</p><blockquote><ul><li><p>原话是一个反问句，我适当调整了一下，调整成了陈述句。陈述句阅读起来，给人很直爽的感觉。</p></li><li><p>核心思想：<strong>把共享的数据抽离出来，以全局单例模式管理。</strong></p></li></ul></blockquote><h3 id="_5-什么是单例模式" tabindex="-1"><a class="header-anchor" href="#_5-什么是单例模式" aria-hidden="true">#</a> 5.什么是单例模式？</h3><blockquote><p>要是换做以前，可能这段内容我就跳过了。但是最近刚好学习了设计模式，又刚好学习了单例模式，这里我就讲讲我的理解。</p></blockquote><h4 id="_5-1-一般的情况下-我们有一个类-我们可以通过-new-关键词-基于这个类创建多个实例。" tabindex="-1"><a class="header-anchor" href="#_5-1-一般的情况下-我们有一个类-我们可以通过-new-关键词-基于这个类创建多个实例。" aria-hidden="true">#</a> 5.1 一般的情况下，我们有一个类，我们可以通过 new 关键词，基于这个类创建多个实例。</h4><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Tomato</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tomato</span><span class="token punctuation">(</span><span class="token string">&#39;红色的番茄&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tomato</span><span class="token punctuation">(</span><span class="token string">&#39;橙色的番茄&#39;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>
<span class="token comment">// { name: &#39;红色的番茄&#39; }</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span>
<span class="token comment">// { name: &#39;橙色的番茄&#39; }</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-单例模式的概念" tabindex="-1"><a class="header-anchor" href="#_5-2-单例模式的概念" aria-hidden="true">#</a> 5.2 单例模式的概念</h4><p><em>保证一个类仅有一个实例，并提供一个访问它的全局访问点，这样的模式就叫做单例模式。</em></p><blockquote><p>我的理解：一个类只能有一个实例</p></blockquote><h4 id="_5-3-为什么要用单例模式" tabindex="-1"><a class="header-anchor" href="#_5-3-为什么要用单例模式" aria-hidden="true">#</a> 5.3 为什么要用单例模式？</h4><p>举个例子：</p><p>假如，我一个项目组有好几个人。</p><p>我在项目搭建的时候，我引入了 <code>Vuex</code>，做状态管理。</p><p>然后我通过 <code>const A = new Vuex()</code> ，创建了一个对象A。我所有的共享数据，都存储在这个对象A中。</p><blockquote><p>当然 <code>new Vuex</code> 只是举例，后续会讲到它的真实用法。</p></blockquote><p>如果其他的小伙伴不知情，也通过 \`\`const B = new Vuex()\` 创建了实例B 。那我想读取和存储共享的数据，到底存储在A还是B呢？</p><p>所以这就必须要引入一个 <strong>单例模式</strong> 的概念。</p><h4 id="_5-4-如何实现单例模式" tabindex="-1"><a class="header-anchor" href="#_5-4-如何实现单例模式" aria-hidden="true">#</a> 5.4 如何实现单例模式？</h4><p><strong>我在编写这篇文章的时候，下载的 <code>Vuex</code>版本是 4.0，找了很久找不到对应代码了。</strong></p>`,23),V={href:"https://github.com/vuejs/vuex/blob/3.x/src/store.js",target:"_blank",rel:"noopener noreferrer"},w=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vuex/src/store.js</span>
<span class="token keyword">function</span> <span class="token function">install</span> <span class="token punctuation">(</span><span class="token parameter">_Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//  判断传入的Vue实例对象是否已经被install过Vuex插件（是否有了唯一的state）</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Vue <span class="token operator">&amp;&amp;</span> _Vue <span class="token operator">===</span> Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
        <span class="token string">&#39;[vuex] already installed. Vue.use(Vuex) should be called only once.&#39;</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  Vue <span class="token operator">=</span> _Vue<span class="token punctuation">;</span>
  <span class="token function">applyMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自己实现一个 单例模式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">SingleDog</span> <span class="token punctuation">{</span>
    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是一个单例对象&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断是否已经new过1个实例</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>SingleDog<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 若这个唯一的实例不存在，那么先创建它</span>
            SingleDog<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果这个唯一的实例已经存在，则直接返回</span>
        <span class="token keyword">return</span> SingleDog<span class="token punctuation">.</span>instance
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> s1 <span class="token operator">=</span> SingleDog<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> SingleDog<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// true</span>
s1 <span class="token operator">===</span> s2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，说远了，回归到正题。</p><hr><h2 id="二-vuex-如何使用" tabindex="-1"><a class="header-anchor" href="#二-vuex-如何使用" aria-hidden="true">#</a> 二. <code>Vuex</code> 如何使用？</h2><h3 id="_1-安装" tabindex="-1"><a class="header-anchor" href="#_1-安装" aria-hidden="true">#</a> 1. 安装</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install vuex --save
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-引入" tabindex="-1"><a class="header-anchor" href="#_2-引入" aria-hidden="true">#</a> 2. 引入</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">store</span><span class="token operator">:</span> store<span class="token punctuation">,</span> <span class="token comment">// 这样我们可以</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Store</code> 英文释义： <code>仓库</code>。</p><p>主要的用法：</p><ol><li><code>Vue.use(Vuex)</code> 在 <code>Vuex</code> 中绑定 <code>vue</code> 实例。</li><li>基于 <code>Vuex.Store</code> ，<code>new</code> 出一个实例 <code>store</code>。</li><li>在 <code>new Vue</code> 的配置对象中，传入 <code>store</code>。方便全局直接 <code>this.$store</code> 使用。</li></ol><h3 id="_3-state" tabindex="-1"><a class="header-anchor" href="#_3-state" aria-hidden="true">#</a> 3. state</h3><p>在 <code>new Vuex.Store()</code> 中传入的配置项，主要有五个属性。</p><ol><li>state <code>状态</code></li><li>mutations <code>改变</code></li><li>actions <code>行动</code></li><li>getters <code>获得</code></li><li>modules <code>模块</code></li></ol><p>首先，<code>Vuex</code> 主要是用来管理数据，所以必须要有一个位置可以存储数据。这个位置就是 state。使用时结合计算属性 <code>computed</code> 选项使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 注册：</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">// 在组件中使用</span>
<span class="token keyword">const</span> Counter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;{{ count }}&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">count</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性，让你少按几次键：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在单独构建的版本中辅助函数为 Vuex.mapState</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 箭头函数可使代码更简练</span>
    <span class="token function-variable function">count</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>

    <span class="token comment">// 传字符串参数 &#39;count&#39; 等同于 \`state =&gt; state.count\`</span>
    <span class="token literal-property property">countAlias</span><span class="token operator">:</span> <span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span>

    <span class="token comment">// 为了能够使用 \`this\` 获取局部状态，必须使用常规函数</span>
    <span class="token function">countPlusLocalState</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localCount
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt="image-20230217210923321"></p><h3 id="_4-mutations" tabindex="-1"><a class="header-anchor" href="#_4-mutations" aria-hidden="true">#</a> 4. mutations</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。</p><p>同步修改 state 的数据，在 <code>mutations </code> 中定义方法，外部调用这个方法，触发修改。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 变更状态</span>
      state<span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">// 触发更改</span>
store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-action" tabindex="-1"><a class="header-anchor" href="#_5-action" aria-hidden="true">#</a> 5. action</h3><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-getters" tabindex="-1"><a class="header-anchor" href="#_6-getters" aria-hidden="true">#</a> 6. getters</h3><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">doneTodos</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>done<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>doneTodos <span class="token comment">// -&gt; [{ id: 1, text: &#39;...&#39;, done: true }]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-modules" tabindex="-1"><a class="header-anchor" href="#_7-modules" aria-hidden="true">#</a> 7. modules</h3><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> moduleA<span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> moduleB
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a <span class="token comment">// -&gt; moduleA 的状态</span>
store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b <span class="token comment">// -&gt; moduleB 的状态</span>

<span class="token comment">// 使用:</span>
store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a<span class="token punctuation">.</span>xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-思考" tabindex="-1"><a class="header-anchor" href="#三-思考" aria-hidden="true">#</a> 三.思考</h2><p>截止到这里，对Vuex的基础使用，算是基本掌握了。</p><p>记录一下我自己的思考。</p><ol><li>使用Vuex的目的：解决多个组件依赖，多个组件需要修改的数据，共享的问题。</li><li>同步修改，使用 commit的方式，触发 mutation；</li><li>异步修改，使用 dispatch的方式，触发 action；</li><li>getters 相当于过滤器，用于处理数据格式。</li><li>modules 用于将一个大的 state，拆分多个模块。访问的时候，中间穿插模块名。</li></ol><p>也没什么好恐怖的，其实很简单，简单来说，就是一个全局单例的一个对象，存储我们频繁使用的需要共享的数据。</p>`,41);function j(S,q){const a=o("ExternalLinkIcon");return c(),i("div",null,[v,s("p",null,[s("a",m,[b,n("官方文档"),e(a)])]),h,s("p",null,[g,n(" 背后的基本思想，借鉴了 "),s("a",x,[n("Flux "),e(a)]),n("、"),s("a",y,[n("Redux"),e(a)]),n("和 "),s("a",_,[n("The Elm Architecture"),e(a)]),n("。")]),f,s("p",null,[n("**请注意，本文讲解的逻辑主要针对 3.x ** "),s("a",V,[n("下方源码对应 Github 地址 ，点击这里"),e(a)])]),w])}const A=p(k,[["render",j],["__file","4.时隔多年再学习Vuex，什么？原来如此简单!.html.vue"]]);export{A as default};
