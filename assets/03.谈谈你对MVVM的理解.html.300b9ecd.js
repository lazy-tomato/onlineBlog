import{_ as e,o as d,c as i,e as a}from"./app.acfc35a6.js";const o={},l=a('<h1 id="谈谈你对-mvvm-的理解" tabindex="-1"><a class="header-anchor" href="#谈谈你对-mvvm-的理解" aria-hidden="true">#</a> 谈谈你对 MVVM 的理解</h1><h2 id="解释" tabindex="-1"><a class="header-anchor" href="#解释" aria-hidden="true">#</a> 解释：</h2><p>MVVM 分为 Model、View、ViewMode</p><ul><li>Model：代表数据模型，数据和业务逻辑都在 Model 层中定义；</li><li>View：代表 UI 视图，负责数据的展示；</li><li>ViewModel：负责监听 Model 中数据的改变并且控制视图的更新，处理用户交互操作；</li></ul><h2 id="vue-和-mvvm-的关系" tabindex="-1"><a class="header-anchor" href="#vue-和-mvvm-的关系" aria-hidden="true">#</a> Vue 和 MVVM 的关系</h2><ul><li>Vue 框架就是一个典型的 MVVM 模型的框架</li><li>Vue 框架就是充当了 MVVM 开发模式中的 ViewModel 层，负责 View 和 Model 之间通信的桥梁</li><li>Vue 这样的 MVVM 框架将视图层和模型层有效地分离开来，这样你只需要关心数据就行啦</li></ul><h2 id="自己回答" tabindex="-1"><a class="header-anchor" href="#自己回答" aria-hidden="true">#</a> 自己回答：</h2><p><code>MVVM</code> 可以分为，<code>M</code>,<code>V</code>,<code>VM</code>。分别代表 Model、View、ViewMode。 数据和业务逻辑在 Model 层；View 用于页面展示；ViewModel 用于链接 M 和 V，数据发生改变则自动更新页面，使我们可以更多的专注于 Model 层，无需手动操作 DOM。</p>',8),V=[l];function M(c,r){return d(),i("div",null,V)}const t=e(o,[["render",M],["__file","03.谈谈你对MVVM的理解.html.vue"]]);export{t as default};
