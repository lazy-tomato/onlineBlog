import{_ as e,r as t,o,c,a as n,b as p,d as i,e as a}from"./app.acfc35a6.js";const l="/onlineBlog/assets/image-20230302225926883.d763cfe7.png",d="/onlineBlog/assets/image-20230302233434774.e3d17d1f.png",u="/onlineBlog/assets/image-20230302233911571.5517a7cd.png",r={},h=a('<h2 id="为什么我复制的中文url粘贴出来会是乱码的-浏览器url编码和解码" tabindex="-1"><a class="header-anchor" href="#为什么我复制的中文url粘贴出来会是乱码的-浏览器url编码和解码" aria-hidden="true">#</a> 为什么我复制的中文url粘贴出来会是乱码的？ 浏览器url编码和解码</h2><h2 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> Start</h2><ul><li>番茄最近涉及到一些和单点登录相关的业务需求，在实现功能的过程中，难免少不了和 <code>url</code> 打交道。</li><li>但是在打交道的过程中，遇到一个痛点：明明我复制的 <code>url</code> 是一个很简短的url，但是粘贴到浏览器的时候，却变成很长一串。</li><li>why？</li></ul><h2 id="_1-问题场景" tabindex="-1"><a class="header-anchor" href="#_1-问题场景" aria-hidden="true">#</a> 1. 问题场景</h2><p>举个例子：番茄我突然有一天心血来潮，想要找一个番茄的图片。于是我打开百度，输入番茄，回车搜索。如下图</p><p><img src="'+l+'" alt="image-20230302225926883"></p><p>可以看到上述截图，我们访问的 url 实际就是 <code>https://www.baidu.com/s?wd=番茄</code>；突然我觉得这个番茄图片特别好看，我想分享给我的小伙伴。于是我复制网站的 <code>url</code>，准备粘贴到我的聊天框中，发送给我的小伙伴。</p><p>但是有一个很神奇的现象，我粘贴后的链接，却是这样的：</p><p><code>https://www.baidu.com/s?wd=%E7%95%AA%E8%8C%84</code></p><h2 id="_2-为什么粘贴出来的内容是被转码后的内容呢" tabindex="-1"><a class="header-anchor" href="#_2-为什么粘贴出来的内容是被转码后的内容呢" aria-hidden="true">#</a> 2. 为什么粘贴出来的内容是被转码后的内容呢？</h2>',10),m={href:"https://www.zhihu.com/question/367321768",target:"_blank",rel:"noopener noreferrer"},k=a('<p><img src="'+d+'" alt="image-20230302233434774"></p><p>可以看到上述的内容，最关键的一个点就是：</p><p><strong>因为 URL 本身就不支持中文，所有中文字符都要经过 URL 编码之后才可以传输</strong></p><p>如何验证他说的话呢？</p><blockquote><p>打开浏览器控制台，查看 <code>network</code> 选项，刷新页面。在调用接口的时候，发现访问的 <code>url</code> 是被转码后的内容了。如下图：</p></blockquote><p><img src="'+u+`" alt="image-20230302233911571"></p><p>所以，转义的原因是：</p><p><code>URl</code> 本身就不支持某些字符，在进行传输的时候，它会经过 URL 编码。</p><h2 id="_3-转码相关的疑问" tabindex="-1"><a class="header-anchor" href="#_3-转码相关的疑问" aria-hidden="true">#</a> 3. 转码相关的疑问</h2><h3 id="_3-1-那些会被转义" tabindex="-1"><a class="header-anchor" href="#_3-1-那些会被转义" aria-hidden="true">#</a> 3.1 那些会被转义</h3><p>对歧义性的数据进行 URL 百分号编码。</p><h3 id="_3-2-url转义字符原理" tabindex="-1"><a class="header-anchor" href="#_3-2-url转义字符原理" aria-hidden="true">#</a> 3.2 url转义字符原理：</h3><p>将这些特殊的字符转换成ASCII码，格式为：%加字符的ASCII码，即一个百分号%，后面跟对应字符的ASCII（16进制）码值。例如 空格的编码值是&quot;%20&quot;。</p><h3 id="_3-3-url特殊字符需转义" tabindex="-1"><a class="header-anchor" href="#_3-3-url特殊字符需转义" aria-hidden="true">#</a> 3.3 <strong>URL特殊字符需转义</strong></h3><p>1、空格换成加号(+) 2、正斜杠(/)分隔目录和子目录 3、问号(?)分隔URL和查询 4、百分号(%)制定特殊字符 5、#号指定书签 6、&amp;号分隔参数</p><h3 id="_3-4-中文字符转义原理" tabindex="-1"><a class="header-anchor" href="#_3-4-中文字符转义原理" aria-hidden="true">#</a> 3.4 中文字符转义原理</h3><p>待补充</p><h2 id="_4-js中如何实现解码和编码" tabindex="-1"><a class="header-anchor" href="#_4-js中如何实现解码和编码" aria-hidden="true">#</a> 4. JS中如何实现解码和编码</h2><h3 id="_4-1-解码" tabindex="-1"><a class="header-anchor" href="#_4-1-解码" aria-hidden="true">#</a> 4.1 解码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-编码" tabindex="-1"><a class="header-anchor" href="#_4-2-编码" aria-hidden="true">#</a> 4.2 编码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-中文解释" tabindex="-1"><a class="header-anchor" href="#_4-3-中文解释" aria-hidden="true">#</a> 4.3 中文解释</h3><p>decodeURI() 函数可对 encodeURI() 函数编码过的 URI 进行解码。</p><p>decodeURIComponent() 函数可对 encodeURIComponent() 函数编码的 URI 进行解码。</p><h3 id="_4-4-使用示例" tabindex="-1"><a class="header-anchor" href="#_4-4-使用示例" aria-hidden="true">#</a> 4.4 使用示例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* 1.基础编码 */</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token string">&#39;番茄&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// %E7%95%AA%E8%8C%84</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">&#39;番茄&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// %E7%95%AA%E8%8C%84</span>

<span class="token comment">/* 2.encodeURIComponent支持特殊字符的编码 */</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token string">&#39;番茄#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// %E7%95%AA%E8%8C%84#</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">&#39;番茄#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// %E7%95%AA%E8%8C%84%23</span>


<span class="token comment">/* 3.基础解码 */</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token string">&#39;%E7%95%AA%E8%8C%84&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 番茄</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token string">&#39;%E7%95%AA%E8%8C%84&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 番茄</span>

<span class="token comment">/* 4.encodeURIComponent支持特殊字符的解码 */</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token string">&#39;%E7%95%AA%E8%8C%84%23&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 番茄%23</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token string">&#39;%E7%95%AA%E8%8C%84%23&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 番茄#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>区别： decodeURIComponent() 可以编码和解码URI特殊字符（如#，/，￥等），而 decodeURI()则不能。</strong></p><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> End</h2><ul><li>回想起日常工作中经常使用的截取 <code>url</code> 参数的函数。通常会依据<code>?</code>，<code>&amp;</code> 进行参数处理。当时的我就担心，会不会出现多个特殊字符的情况。</li><li>在对比思考一下这边博客了解到的内容。才发现，担心的情况是会有的，但是会做特殊转义，避免相关问题了。</li><li>加油</li></ul>`,30);function _(v,b){const s=t("ExternalLinkIcon");return o(),c("div",null,[h,n("p",null,[n("a",m,[p("别人的讨论的结果"),i(s)])]),k])}const f=e(r,[["render",_],["__file","1.为什么我复制的中文url粘贴出来会是乱码的？ 浏览器url编码和解码.html.vue"]]);export{f as default};
