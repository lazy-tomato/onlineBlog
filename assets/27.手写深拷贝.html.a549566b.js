import{_ as p,r as o,o as c,c as i,a as n,b as s,d as t,e as a}from"./app.acfc35a6.js";const l={},u=a('<h1 id="手写深拷贝" tabindex="-1"><a class="header-anchor" href="#手写深拷贝" aria-hidden="true">#</a> 手写深拷贝</h1><h2 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h2><ul><li><em><strong>手写深拷贝</strong></em> 肯定是一个必须要掌握的技能，今天来学习一下，手写深拷贝的思路。</li></ul><h2 id="_1-什么是深拷贝-什么是浅拷贝" tabindex="-1"><a class="header-anchor" href="#_1-什么是深拷贝-什么是浅拷贝" aria-hidden="true">#</a> 1. 什么是深拷贝，什么是浅拷贝？</h2><h4 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h4><p>将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象</p><h4 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h4><p>创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</p><h2 id="_2-常见的浅拷贝" tabindex="-1"><a class="header-anchor" href="#_2-常见的浅拷贝" aria-hidden="true">#</a> 2. 常见的浅拷贝</h2><ol><li><code>Object.assgin()</code>;</li><li><code>Array.prototype.slice()</code>;</li><li>扩展运算符<code>...</code>;</li></ol><h2 id="_3-json-parse-json-stringify-obj" tabindex="-1"><a class="header-anchor" href="#_3-json-parse-json-stringify-obj" aria-hidden="true">#</a> 3. <code>JSON.parse(JSON.stringify(obj))</code></h2><p><code>JSON.parse(JSON.stringify(obj))</code>是最简单的深拷贝的方式，但是有一些缺点。</p><p>例如：</p><ol><li>无法处理循环引用；</li><li>忽略 <code>undefined</code>；<code>symbol</code>；<code>函数</code>；</li><li>不能处理一些略微特殊的对象 <code>new Date</code>；</li><li>不能处理正则；</li></ol>',14),r=n("code",null,"JSON.stringify",-1),d={href:"https://blog.csdn.net/wswq2505655377/article/details/125879881",target:"_blank",rel:"noopener noreferrer"},k=a(`<h2 id="_4-手写实现-深拷贝" tabindex="-1"><a class="header-anchor" href="#_4-手写实现-深拷贝" aria-hidden="true">#</a> 4. 手写实现 深拷贝</h2><h3 id="_4-1-基础版" tabindex="-1"><a class="header-anchor" href="#_4-1-基础版" aria-hidden="true">#</a> 4.1 基础版</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> target
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>遍历来源对象，在新对象上添加属性。</p></blockquote><h3 id="_4-2-递归" tabindex="-1"><a class="header-anchor" href="#_4-2-递归" aria-hidden="true">#</a> 4.2 递归</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> source <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> target
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> source
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>对于多层级的对象，递归处理，这种递归很明显，深度优先。</p></blockquote><h3 id="_4-3-处理数组的情况" tabindex="-1"><a class="header-anchor" href="#_4-3-处理数组的情况" aria-hidden="true">#</a> 4.3 处理数组的情况</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> source <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// -------改动---------</span>
    <span class="token keyword">var</span> target <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// --------------------</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> target
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> source
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>利用 <code>Array.isArray</code> 来判断是否是数组，处理属性值为数组的情况。</p><p><code>我自己的思考</code></p><ol><li><p>为什么需要特殊处理数组？</p><p>我的第一反应是为什么数组要特殊处理？虽然数组也是对象，但是数组有自身独有的方法，以及一些属性，例如<code>length</code>。</p><p>好吧，确实需要特殊处理。</p><p>随之又想到另一个特殊的对象：函数？函数在<code>typeof source === &#39;object&#39;</code>中已经排除出去了。</p></li><li><p>看到 <code>Array.isArray</code> 多说几句？</p><p>之前看到有人判断数据类型是否为数组？不使用<code>Array.isArray</code>，使用的是<code>Object.prototype.toString</code>。</p><p><code>Array.isArray</code>，注意事项：ES5，不兼容IE6-8；（s所以判断数组，大可放心使用）</p></li></ol></blockquote><h3 id="_4-4-处理循环引用" tabindex="-1"><a class="header-anchor" href="#_4-4-处理循环引用" aria-hidden="true">#</a> 4.4 处理循环引用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> source <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>

    <span class="token keyword">var</span> target <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> target
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> source
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),v=n("p",null,[s("处理循环引用的思路：针对对象类型的数据，利用 "),n("code",null,"map"),s(" 结构将 "),n("em",null,[n("strong",null,"该对象和该对象的拷贝")]),s(" 存储起来。后续再读取到相同的对象，直接返回存储的对象。")],-1),h=n("p",null,[n("code",null,"我自己的思考")],-1),b=a("<li><p><code>WeakMap</code> 相关的<code>API</code>不熟悉。</p><p><code>WeakMap</code> 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。</p><p>后期要再复习一下。</p></li><li><p>判断数据的时机和存储数据的时机，不太清楚？</p><p>判断的时机，放在已知数据是对象类型的情况后。</p><p>存储的时机，引用类型的数据嘛，存储对应的引用地址即可，初始化完毕 target，后存储数据。</p></li>",2),m=n("p",null,[s("为什么要使用 "),n("code",null,"WeakMap"),s(" ？")],-1),y=n("p",null,"首先，ES6的map结构支持，对象作为对象的键。",-1),_=n("p",null,"其次相对于普通的 map结构，WeakMap弱引用，当我们的对象不使用的时候，相关的键值，自动消失。",-1),f={href:"https://blog.csdn.net/qq_32925031/article/details/111032188",target:"_blank",rel:"noopener noreferrer"},g=a(`<li><p>注意，为了不在函数外部定义变量<code>new WeakMap()</code>，将它放在了函数的形参上，后续递归调用的时候不要忘记传递这个参数。</p></li><li><p>如果不使用ES6怎么办？</p><p>可以考虑使用数组：</p><p>形式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>uniqueList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">source</span><span class="token operator">:</span> source<span class="token punctuation">,</span>
    <span class="token literal-property property">target</span><span class="token operator">:</span> target
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),w=a('<h3 id="_4-5-其他" tabindex="-1"><a class="header-anchor" href="#_4-5-其他" aria-hidden="true">#</a> 4.5 其他</h3><p>还可以考虑的优化项？</p><ol><li>处理特殊的数据类型， symbol，等20多种。</li><li>大量的递归，可能存在暴栈的情况，考虑使用循环代替递归？</li><li>学习一下 <code>lodash</code>中的深拷贝。</li></ol><h2 id="_5-优质博客" tabindex="-1"><a class="header-anchor" href="#_5-优质博客" aria-hidden="true">#</a> 5. 优质博客</h2>',4),j={href:"https://juejin.cn/post/6844903929705136141",target:"_blank",rel:"noopener noreferrer"},x={href:"https://juejin.cn/post/6844903764499906568",target:"_blank",rel:"noopener noreferrer"},O=n("h2",{id:"end",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#end","aria-hidden":"true"},"#"),s(" END")],-1),A=n("ul",null,[n("li",null,"结束")],-1);function q(N,S){const e=o("ExternalLinkIcon");return c(),i("div",null,[u,n("blockquote",null,[n("p",null,[s("这些缺点的根本原因，其实是"),r,s("，可以考虑复习一下这个方法、"),n("a",d,[s("自己总结的博客"),t(e)])])]),k,n("blockquote",null,[v,h,n("ol",null,[b,n("li",null,[m,y,_,n("p",null,[s("相关讲解的博客 "),n("a",f,[s("点击这里："),t(e)])])]),g])]),w,n("ul",null,[n("li",null,[n("a",j,[s("如何写出一个惊艳面试官的深拷贝?"),t(e)])]),n("li",null,[n("a",x,[s("面试题之如何实现一个深拷贝"),t(e)])])]),O,A])}const E=p(l,[["render",q],["__file","27.手写深拷贝.html.vue"]]);export{E as default};
