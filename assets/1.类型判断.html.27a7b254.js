import{_ as r,r as d,o as s,c as a,a as e,b as t,d as l,e as n}from"./app.acfc35a6.js";const c={},i=n('<h1 id="类型判断" tabindex="-1"><a class="header-anchor" href="#类型判断" aria-hidden="true">#</a> 类型判断</h1><h2 id="常见的-js-类型判断的方法" tabindex="-1"><a class="header-anchor" href="#常见的-js-类型判断的方法" aria-hidden="true">#</a> 常见的 JS 类型判断的方法</h2><ul><li><p><code>typeof</code></p></li><li><p><code>===</code></p></li><li><p><code>instanceof</code></p></li><li><p><code>Object.prototype.toString</code></p></li><li><p><code>isXXX</code>，比如 <code>isArray</code></p></li></ul><h2 id="_1-typeof" tabindex="-1"><a class="header-anchor" href="#_1-typeof" aria-hidden="true">#</a> 1.<code>typeof</code></h2><p>一般基本类型的数据我们用<code>typeof</code>去做判断。</p><blockquote><p>比较特殊的</p><ul><li><code>typeof null</code>=》<code>&quot;object&quot;</code></li><li><code>typeof 函数</code>=》<code>&quot;function&quot;</code></li><li><code>typeof 其他任何对象</code>=》<code>&quot;object&quot;</code></li></ul></blockquote>',6),h=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"类型"),e("th",{style:{"text-align":"left"}},"结果")])],-1),_={style:{"text-align":"left"}},f={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/undefined",target:"_blank",rel:"noopener noreferrer"},p=e("td",{style:{"text-align":"left"}},[e("code",null,'"undefined"')],-1),u={style:{"text-align":"left"}},g={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Null",target:"_blank",rel:"noopener noreferrer"},y={style:{"text-align":"left"}},b=e("code",null,'"object"',-1),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null",target:"_blank",rel:"noopener noreferrer"},m={style:{"text-align":"left"}},z={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Boolean",target:"_blank",rel:"noopener noreferrer"},N=e("td",{style:{"text-align":"left"}},[e("code",null,'"boolean"')],-1),k={style:{"text-align":"left"}},C={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Number",target:"_blank",rel:"noopener noreferrer"},v=e("td",{style:{"text-align":"left"}},[e("code",null,'"number"')],-1),S={style:{"text-align":"left"}},j={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/BigInt",target:"_blank",rel:"noopener noreferrer"},q=e("td",{style:{"text-align":"left"}},[e("code",null,'"bigint"')],-1),G={style:{"text-align":"left"}},B={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/String",target:"_blank",rel:"noopener noreferrer"},E=e("td",{style:{"text-align":"left"}},[e("code",null,'"string"')],-1),A={style:{"text-align":"left"}},I={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Symbol",target:"_blank",rel:"noopener noreferrer"},V=e("td",{style:{"text-align":"left"}},[e("code",null,'"symbol"')],-1),J=e("tr",null,[e("td",{style:{"text-align":"left"}},"宿主对象（由 JS 环境提供）"),e("td",{style:{"text-align":"left"}},[e("em",null,"取决于具体实现")])],-1),M={style:{"text-align":"left"}},O={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Function",target:"_blank",rel:"noopener noreferrer"},X=e("td",{style:{"text-align":"left"}},[e("code",null,'"function"')],-1),F=e("tr",null,[e("td",{style:{"text-align":"left"}},"其他任何对象"),e("td",{style:{"text-align":"left"}},[e("code",null,'"object"')])],-1),L=n('<h3 id="_2" tabindex="-1"><a class="header-anchor" href="#_2" aria-hidden="true">#</a> 2.<code>===</code></h3><p>可以使用全等于去判断 <code>null</code>和 <code>undefined</code>，因为这两个基本类型的值只有一个，所以可以用全等去判断。</p><h3 id="_3-instanceof" tabindex="-1"><a class="header-anchor" href="#_3-instanceof" aria-hidden="true">#</a> 3.instanceof</h3><p>一般判断复杂类型，单词释义<code>实例属于</code>,<code>a instanceof b</code> 翻译过来就是 a 是不是属于 b 的实例。</p><h2 id="_4-object-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#_4-object-prototype-tostring" aria-hidden="true">#</a> 4.<code>Object.prototype.toString</code></h2><p>后续补充</p>',6);function R(T,U){const o=d("ExternalLinkIcon");return s(),a("div",null,[i,e("table",null,[h,e("tbody",null,[e("tr",null,[e("td",_,[e("a",f,[t("Undefined"),l(o)])]),p]),e("tr",null,[e("td",u,[e("a",g,[t("Null"),l(o)])]),e("td",y,[b,t(" (见"),e("a",x,[t("下文"),l(o)]),t(")")])]),e("tr",null,[e("td",m,[e("a",z,[t("Boolean"),l(o)])]),N]),e("tr",null,[e("td",k,[e("a",C,[t("Number"),l(o)])]),v]),e("tr",null,[e("td",S,[e("a",j,[t("BigInt"),l(o)]),t("(ECMAScript 2020 新增)")]),q]),e("tr",null,[e("td",G,[e("a",B,[t("String"),l(o)])]),E]),e("tr",null,[e("td",A,[e("a",I,[t("Symbol"),l(o)]),t(" (ECMAScript 2015 新增)")]),V]),J,e("tr",null,[e("td",M,[e("a",O,[t("Function"),l(o)]),t(" 对象 (按照 ECMA-262 规范实现 [[Call]])")]),X]),F])]),L])}const w=r(c,[["render",R],["__file","1.类型判断.html.vue"]]);export{w as default};
