import{_ as a,o as i,c as e,e as t}from"./app.acfc35a6.js";const s={},c=t('<h2 id="async-函数" tabindex="-1"><a class="header-anchor" href="#async-函数" aria-hidden="true">#</a> async 函数</h2><ol><li>函数的返回值为 promise 对象</li><li>promise 对象的结果由 async 函数执行的返回值决定</li></ol><h2 id="await-表达式" tabindex="-1"><a class="header-anchor" href="#await-表达式" aria-hidden="true">#</a> await 表达式</h2><ol><li>await 右侧的表达式一般为 promise 对象, 但也可以是其它的值</li><li>如果表达式是 promise 对象, await 返回的是 promise 成功的值</li><li>如果表达式是其它值, 直接将此值作为 await 的返回值</li><li>await 必须写在 async 函数中, 但 async 函数中可以没有 await</li><li>如果 await 的 promise 失败了, 代码直接暂停并抛出异常, 需要通过 try…catch 捕获处理</li><li>await 后续的代码，可以理解为 在 await 语句返回的 promise 对象的 then 方法中执行。</li></ol>',4),l=[c];function r(o,n){return i(),e("div",null,l)}const h=a(s,[["render",r],["__file","05.说说async和await.html.vue"]]);export{h as default};
