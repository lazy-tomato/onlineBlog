import{_ as n,o as s,c as a,e as t}from"./app.acfc35a6.js";const p="/onlineBlog/assets/image-20221211203608973.d0189b76.png",e="/onlineBlog/assets/image-20221211225633848.b8bc3c19.png",c="/onlineBlog/assets/image-20221211225756747.e7c38a1f.png",o="/onlineBlog/assets/image-20221211230045902.91362062.png",l="/onlineBlog/assets/image-20221211234019058.a5aa838a.png",i="/onlineBlog/assets/end.adc68c0b.gif",u={},d=t(`<h1 id="js-执行和-dom-渲染的顺序" tabindex="-1"><a class="header-anchor" href="#js-执行和-dom-渲染的顺序" aria-hidden="true">#</a> JS 执行和 DOM 渲染的顺序</h1><h2 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h2><ul><li>前面学习了事件循环，学习了宏任务微任务，了解了它们之间的执行顺序。</li><li>但是还有些问题困扰着我。</li><li>那么今天这篇文章，就编写一些案例，验证一下困扰我的问题。</li></ul><h2 id="前置逻辑" tabindex="-1"><a class="header-anchor" href="#前置逻辑" aria-hidden="true">#</a> 前置逻辑</h2><ul><li><p>首先，由前几篇文章可以了解到：JS 执行顺序：<strong><code>当前宏任务&gt;当前的所有微任务&gt;下一个宏任务&gt;下一个的所有微任务</code></strong>。</p></li><li><p>本文所有示例，运行环境为：<code>谷歌浏览器</code>, <code>win10</code>, <code>107.0.5304.88</code>。</p></li></ul><h2 id="_1-多个script标签执行顺序" tabindex="-1"><a class="header-anchor" href="#_1-多个script标签执行顺序" aria-hidden="true">#</a> 1. 多个<code>script</code>标签执行顺序</h2><h3 id="_1-1-代码" tabindex="-1"><a class="header-anchor" href="#_1-1-代码" aria-hidden="true">#</a> 1.1 代码</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zh<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>lazy_tomato出品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1.1&#39;</span><span class="token punctuation">)</span>
      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1.2&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1.3&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1.4&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2.1&#39;</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3.1&#39;</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-运行截图" tabindex="-1"><a class="header-anchor" href="#_1-2-运行截图" aria-hidden="true">#</a> 1.2 运行截图</h3><p><img src="`+p+'" alt="image-20221211203608973"></p><h3 id="_1-3-思考" tabindex="-1"><a class="header-anchor" href="#_1-3-思考" aria-hidden="true">#</a> 1.3 思考</h3><p>结合上述截图的输出，可以把<strong>每个 <code>script</code> 标签，都看做一个宏任务</strong>；它们会按照定义的顺序，依次执行。</p><p><code>其他</code></p><blockquote><ul><li><p>我在多个浏览器中打开了演示的<code>html</code>，查看了 <code>script</code> 标签和定时器的执行顺序，结果都是：定时器晚于 <code>script</code> 标签执行</p><p>我猜测可能是因为：W3C 在 HTML 标准中规定，规定要求 setTimeout 中低于 4ms 的时间间隔算为 4ms；（所以相对于声明的标签，会略晚运行）</p></li><li><p>每个 <code>script</code> 标签相互独立，如果某个 <code>script</code> 标签报错，不影响其他 <code>script</code> 标签的代码执行，但是共享全局变量(window)。</p></li><li><p><code>script</code> 标签，有两个特殊的属性：</p><ol><li><code>async</code>：异步加载，JS 加载完毕后，就执行，（如果页面正在加载就会阻塞页面加载）</li><li><code>defer</code>：异步加载，等页面加载完毕后再按照顺序执行</li></ol></li></ul></blockquote><h2 id="_2-alert-会阻止页面加载" tabindex="-1"><a class="header-anchor" href="#_2-alert-会阻止页面加载" aria-hidden="true">#</a> 2. alert 会阻止页面加载</h2><h3 id="_2-1-说明" tabindex="-1"><a class="header-anchor" href="#_2-1-说明" aria-hidden="true">#</a> 2.1 说明</h3><p>后续的演示代码，会用到 <code>alert</code> ，所以这里简单介绍一下 <code>alert</code>。</p><h3 id="_2-2-alert-可以弹出弹框-输出内容。" tabindex="-1"><a class="header-anchor" href="#_2-2-alert-可以弹出弹框-输出内容。" aria-hidden="true">#</a> 2.2 alert 可以弹出弹框，输出内容。</h3><p><img src="'+e+`" alt="image-20221211225633848"></p><h3 id="_2-3-alert-输出的内容会隐式转换为字符串" tabindex="-1"><a class="header-anchor" href="#_2-3-alert-输出的内容会隐式转换为字符串" aria-hidden="true">#</a> 2.3 alert 输出的内容会隐式转换为字符串</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+c+`" alt="image-20221211225756747"></p><h3 id="_2-4-alert-会阻塞-js-执行" tabindex="-1"><a class="header-anchor" href="#_2-4-alert-会阻塞-js-执行" aria-hidden="true">#</a> 2.4 alert 会阻塞 JS 执行</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zh<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>lazy_tomato出品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tomato<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>lazy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;测试&#39;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+'" alt="image-20221211230045902"></p><p><code>思考</code></p><p>问题：在弹出 alert 的时候，页面的 lazy 没有被渲染出来？</p><p><strong>我猜测的原因</strong>：首先 <code>script</code> 标签本身也是 <code>html</code> 标签，所以首次绘制也会加载对应的 <code>script</code> 标签；然后渲染树已经加载完毕了，在真正渲染到页面之前，会执行 <code>script</code> 标签中的代码，执行完毕 JS 后再渲染页面。 而 <code>alert</code> 有阻碍了 JS 的执行，随即也就阻碍了后续页面真实绘制。</p><p><img src="'+l+`" alt="image-20221211234019058"></p><h2 id="_3-dom-渲染的顺序" tabindex="-1"><a class="header-anchor" href="#_3-dom-渲染的顺序" aria-hidden="true">#</a> 3. DOM 渲染的顺序</h2><h3 id="_3-1-代码" tabindex="-1"><a class="header-anchor" href="#_3-1-代码" aria-hidden="true">#</a> 3.1 代码</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zh<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>lazy_tomato出品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tomato<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">var</span> tomato <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;tomato&#39;</span><span class="token punctuation">)</span>

      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 定义多个宏任务</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// 修改DOM</span>
          tomato<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> index

          <span class="token comment">// 同步任务</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;宏任务执行了&#39;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> tomato<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>

          <span class="token comment">// 微任务</span>
          Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;微任务执行了&#39;</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>

            <span class="token comment">// 阻断</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>
              <span class="token string">&#39;当前的tomato中的内容已经被修改了，修改的值为&#39;</span> <span class="token operator">+</span> tomato<span class="token punctuation">.</span>innerHTML
            <span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-运行截图" tabindex="-1"><a class="header-anchor" href="#_3-2-运行截图" aria-hidden="true">#</a> 3.2 运行截图</h3><p><img src="`+i+'" alt="end"></p><h3 id="_3-3-思考" tabindex="-1"><a class="header-anchor" href="#_3-3-思考" aria-hidden="true">#</a> 3.3 思考</h3><ol><li><p>上述的实例可以很好的证明：</p><p><strong>页面执行顺序为： 当前的宏任务 &gt; 当前的微任务 &gt; DOM 渲染 &gt; 下一个宏任务 &gt; 下一个微任务 &gt; 下一次 DOM 渲染。</strong></p></li></ol><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> end</h2><ul><li>JS 博大精深，想写的很深入，奈何了解的知识有限，后面要是有新的感悟，再做补充</li><li>加油！！！</li></ul>',38),k=[d];function r(g,v){return s(),a("div",null,k)}const h=n(u,[["render",r],["__file","5.JS执行和DOM渲染的顺序.html.vue"]]);export{h as default};
