import{_ as o,r as e,o as p,c,a as n,b as s,d as l,e as a}from"./app.acfc35a6.js";const i="/onlineBlog/assets/image-20230227152414999.8b014d3a.png",r="/onlineBlog/assets/image-20230227153038928.f25933b8.png",u="/onlineBlog/assets/image-20230227162030346.0e833661.png",d="/onlineBlog/assets/image-20230227162452038.01bc18f2.png",k={},m=a('<h1 id="最新版axios-1-3-x取消请求-abortcontroller-初体验-番茄出品" tabindex="-1"><a class="header-anchor" href="#最新版axios-1-3-x取消请求-abortcontroller-初体验-番茄出品" aria-hidden="true">#</a> 最新版axios@1.3.x取消请求-AbortController-初体验-番茄出品</h1><h2 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h2><ul><li><p>前文提到，<code>axios</code> 中的取消请求，包含两种方式：</p><ul><li><code>AbortController</code>；</li><li><code>CancelToken</code>；</li></ul></li><li><p>上篇文章讲解了 <code>CancelToken</code>，今天这篇文章来了解一下 <code>AbortController</code>;</p></li><li><p>作者：lazy_tomato</p></li><li><p>编写时间：2023/02/27 23/10</p></li></ul><h2 id="_1-abortcontroller-是什么" tabindex="-1"><a class="header-anchor" href="#_1-abortcontroller-是什么" aria-hidden="true">#</a> 1. AbortController 是什么？</h2><h3 id="_1-1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-介绍" aria-hidden="true">#</a> 1.1 介绍</h3><p><strong><code>AbortController</code></strong> 接口表示一个控制器对象，允许你根据需要中止一个或多个 Web 请求。</p><h3 id="_1-2-mdn官方文档" tabindex="-1"><a class="header-anchor" href="#_1-2-mdn官方文档" aria-hidden="true">#</a> 1.2 MDN官方文档</h3>',7),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController",target:"_blank",rel:"noopener noreferrer"},v=a('<p><img src="'+i+`" alt="image-20230227152414999"></p><h3 id="_1-3-官方文档使用案例" tabindex="-1"><a class="header-anchor" href="#_1-3-官方文档使用案例" aria-hidden="true">#</a> 1.3 官方文档使用案例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> controller<span class="token punctuation">;</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;video.mp4&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> downloadBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.download&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> abortBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.abort&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

downloadBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> fetchVideo<span class="token punctuation">)</span><span class="token punctuation">;</span>

abortBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>controller<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;中止下载&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fetchVideo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">;</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> signal <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;下载完成&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">下载错误：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-兼容性" tabindex="-1"><a class="header-anchor" href="#_1-3-兼容性" aria-hidden="true">#</a> 1.3 兼容性</h3><p><img src="`+r+`" alt="image-20230227153038928"></p><ol><li>可以在 <code>caniuse.com</code> 中 查看到对 <code>AbortController</code> 的解释；</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Controller object that allows you to abort one or more DOM requests made with the Fetch API.

控制器对象，该对象允许您中止使用 Fetch API 发出的一个或多个DOM请求。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>原生 AbortController 不支持 IE 全系列</strong>；</li></ol><h2 id="_2-axios-中的-abortcontroller-如何作用" tabindex="-1"><a class="header-anchor" href="#_2-axios-中的-abortcontroller-如何作用" aria-hidden="true">#</a> 2. axios 中的 AbortController 如何作用</h2><p>新版旧版差异：</p><p><img src="`+u+'" alt="image-20230227162030346"></p><p>由上图可以查看到：</p><ol><li><p><code>axios</code> 对旧版本的 <code>CancelToken</code> 用法，还是保留了兼容处理；</p></li><li><p>最新版本的 <code>axios</code>，提供了对 <code>signal</code> 属性的判断；</p></li><li><p>在浏览器端，使用的都是 XMLHttpRequest 发起请求的；</p><p><img src="'+d+'" alt="image-20230227162452038"></p></li></ol><h2 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结" aria-hidden="true">#</a> 3. 总结</h2><p>总的来说，截至目前，<code>1. AbortController</code>；<code>2. CancelToken</code>；两者都可以实现取消请求。</p><ul><li><p>底层逻辑相同：都是通过传入配置参数，再手动触发对应参数的取消方法。</p></li><li><p>差异：传入的配置对象不同。</p></li></ul>',16);function b(_,g){const t=e("ExternalLinkIcon");return p(),c("div",null,[m,n("p",null,[s("MDN官方文档 "),n("a",h,[s("点击这里："),l(t)])]),v])}const x=o(k,[["render",b],["__file","8.最新版axios@1.3.x取消请求--AbortController.html.vue"]]);export{x as default};
