import{_ as n,o as s,c as a,e}from"./app.acfc35a6.js";const t={},p=e(`<h1 id="xmlhttprequest" tabindex="-1"><a class="header-anchor" href="#xmlhttprequest" aria-hidden="true">#</a> XMLHttpRequest</h1><h2 id="_1-基础知识" tabindex="-1"><a class="header-anchor" href="#_1-基础知识" aria-hidden="true">#</a> 1. 基础知识</h2><p><code>XMLHttpRequest</code> 是一个对象，由浏览器提供，最早由 IE5 引入。</p><p>利用 <code>XMLHttpRequest</code> 可以实现，无需卸载页面即可向服务器请求额外的数据。</p><h2 id="_2-手写一个-xmlhttprequest" tabindex="-1"><a class="header-anchor" href="#_2-手写一个-xmlhttprequest" aria-hidden="true">#</a> 2. 手写一个 XMLHttpRequest</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">,</span> ture<span class="token punctuation">)</span>

xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//  请求成功</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 请求失败</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123123&#39;</span><span class="token punctuation">)</span>

xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-xmlhttprequest-的注意事项" tabindex="-1"><a class="header-anchor" href="#_3-xmlhttprequest-的注意事项" aria-hidden="true">#</a> 3. XMLHttpRequest 的注意事项</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 构造函数，用 new 的形式使用</span>
<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 2.open方法接受三个参数，分别为： 请求类型；请求地址，是否异步发送请求</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">,</span> ture<span class="token punctuation">)</span>

<span class="token comment">// 3.监听readystate状态码的改变，</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 4 自定义请求头</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123123&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 5. 发送请求数据，如果不传递参数，则必须传 null</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>注意事项</code></p><ul><li><p><code>XMLHttpRequset</code> IE8 以下有兼容性问题；</p></li><li><p><code>XMLHttpRequset</code>支持同步请求；</p></li><li><p><code>onreadystatechange</code> 事件名称全小写；</p><blockquote><ul><li><code>onreadystatechange</code> 函数中推荐使用<code>xhr</code>，而不是 <code>this</code>，作用域在某些浏览器中有些不同。</li></ul></blockquote></li><li><p><code>readyState</code> 状态码的区分</p><blockquote><ul><li><code>0</code> ：未初始化，尚未调用 open() 方法；</li><li><code>1</code> ：启动，已经调用了 open() 方法，打算尚未调用 send() 方法；</li><li><code>2</code>：发送，已经调用 send() 方法，但未接收到响应；</li><li><code>3</code>：接收，已经接收到部分数据；</li><li><code>4</code>：完成，已经接收到全部响应数据，而且已经可以在客户端使用了；</li></ul></blockquote></li><li><p><code>status</code>的筛选</p><blockquote><ul><li><code>2XX</code> 的状态码是请求成功的 status 状态码；</li><li>注意 <code>304</code> 很有意思，指请求的资源并没有被修改；</li></ul></blockquote></li><li><p><code>setRequestHeader</code> 在 open() 方法和 send() 方法中间才有效；</p></li><li><p><code>send</code> 方法如果不传递参数，则必须传 <code>null</code></p></li></ul><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> end</h2><p>总结一下，写这篇文章，学习到的收获：</p><ul><li>阅读了 《javascript高级程序设计》有关ajax的章节；</li><li>手写了一遍利用 <code>XMLHttpRequest</code> 发起请求的代码；</li><li>记住了一些单词： <ul><li><code>XMLHttpRequest</code></li><li><code>readystate</code></li><li><code>status</code></li></ul></li><li>复习了相关 api 的使用和注意事项。</li><li>最让我惊喜的是：<strong>304状态码</strong>和<strong>同步请求</strong>。</li></ul>`,13),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","1.XMLHttpRequest.html.vue"]]);export{d as default};
