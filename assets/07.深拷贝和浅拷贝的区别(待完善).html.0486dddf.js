import{_ as e,o as a,c as r,e as i}from"./app.acfc35a6.js";const h={},d=i('<h1 id="深浅拷贝" tabindex="-1"><a class="header-anchor" href="#深浅拷贝" aria-hidden="true">#</a> 深浅拷贝</h1><p>需要会手写深拷贝</p><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p>深拷贝拷贝多层，每一级别的数据都会拷贝 浅拷贝只拷贝一层，更深层次的对象，只拷贝引用</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><p>需要复制一份数据时。</p><h2 id="那些是浅拷贝-那些是深拷贝" tabindex="-1"><a class="header-anchor" href="#那些是浅拷贝-那些是深拷贝" aria-hidden="true">#</a> 那些是浅拷贝，那些是深拷贝?</h2><h3 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h3><ol><li>Object.assign</li><li>...</li><li>Array.prototype.slice</li></ol><h3 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h3><p>JSON.parse(JSON.stringify())</p><blockquote><p>注意 JSON.stringify()有副作用，对于</p></blockquote><p>jq 中的 extend</p><p>lodash 中的 deepClone</p><p>手动实现</p>',15),t=[d];function n(c,s){return a(),r("div",null,t)}const o=e(h,[["render",n],["__file","07.深拷贝和浅拷贝的区别(待完善).html.vue"]]);export{o as default};
