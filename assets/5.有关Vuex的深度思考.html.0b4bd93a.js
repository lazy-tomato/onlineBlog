import{_ as p,r as o,o as l,c as i,a as n,b as a,d as e,e as t}from"./app.acfc35a6.js";const r={},c=t('<h1 id="有关vuex的深度思考" tabindex="-1"><a class="header-anchor" href="#有关vuex的深度思考" aria-hidden="true">#</a> 有关Vuex的深度思考</h1><h2 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h2><ul><li>上一篇文章对 Vuex 的基本使用，做了基本的了解，满足日常的基础使用。</li><li>虽然我们会使用了，但是有关于 Vuex 还是有一些相关的疑问。这篇文章做一下记录。</li></ul><h2 id="_1-对比-vuex-和本地存储" tabindex="-1"><a class="header-anchor" href="#_1-对比-vuex-和本地存储" aria-hidden="true">#</a> 1. 对比 Vuex 和本地存储</h2><p>浏览器环境下，项目没有引入 Vuex ，存储较少的标准json数据的情况。</p><p>我在思考，是否直接使用浏览器的本地存储（<code>localStorage，sessionStorage</code>），更加简单快捷。</p><p>想要准确的思考，就必须要知道它们的不同点，它们各自的优势和劣势。</p><h3 id="_1-1-存储数据的地方不同。" tabindex="-1"><a class="header-anchor" href="#_1-1-存储数据的地方不同。" aria-hidden="true">#</a> 1.1 存储数据的地方不同。</h3><ul><li><p>Vuex 的数据，其实是我们通过 <code>new</code> 得到的一个对象，它存储在内存中。</p></li><li><p>localstorage（本地存储）则以文件的方式存储在本地,永久保存。</p></li><li><p>sessionstorage( 会话存储 ) ,临时保存。</p></li></ul><h3 id="_1-2-存储的数据类型不同。" tabindex="-1"><a class="header-anchor" href="#_1-2-存储的数据类型不同。" aria-hidden="true">#</a> 1.2 存储的数据类型不同。</h3><ul><li><p>Vuex 存储的是一个对象，对象又在内存中，所以，理论上，可以存储 js 中所有类型的数据。</p></li><li><p><code>localStorage，sessionStorage</code> 是以字符串为基础，进行数据的存储的，所以可以存储字符串。当然如果是标准的 JSON 对象。 可以通过 <code>JSON.stringify()</code> 转换成字符串存储。</p><blockquote><p>JSON.stringify() 不支持 函数，正则，特殊类型的数据。</p></blockquote></li></ul><h3 id="_1-3-是否支持响应式。" tabindex="-1"><a class="header-anchor" href="#_1-3-是否支持响应式。" aria-hidden="true">#</a> 1.3 是否支持响应式。</h3><ul><li>Vuex 专为 Vue设计，定义在 state 中的数据支持响应式。</li><li><code>localStorage，sessionStorage</code> 数据存储在本地，不支持响应式。</li></ul><h3 id="_1-4-刷新页面数据是否丢失" tabindex="-1"><a class="header-anchor" href="#_1-4-刷新页面数据是否丢失" aria-hidden="true">#</a> 1.4 刷新页面数据是否丢失？</h3><ul><li><p>由于 Vuex 的数据是存储在内存中的，所以当网页刷新的时候，数据会丢失。</p></li><li><p>本地存储的数据则不会丢失。</p></li></ul><h2 id="_2-vuex-中的数据如何持久化" tabindex="-1"><a class="header-anchor" href="#_2-vuex-中的数据如何持久化" aria-hidden="true">#</a> 2. Vuex 中的数据如何持久化</h2><p>由于 Vuex 中的数据存储在内存中，所以有这么一个问题：Vuex 中的数据，页面刷新就没有了？怎么办？对于一个后台管理系统来说，刷新页面是一个很常见的场景。</p><p>目前我了解到的解决方案就是，依赖本地存储，两者互相结合。</p><p>常用的插件有：</p>',19),u={href:"https://github.com/robinvdvleuten/vuex-persistedstate#readme",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/championswimmer/vuex-persist#readme",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>具体的使用教程，可以访问对应的github或者npm官网查询。</p><p>我这里贴一下示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token keyword">import</span> VuexPersistence <span class="token keyword">from</span> <span class="token string">&#39;vuex-persist&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> authStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./auth.store&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> themeStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./theme.store&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> tenantStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./tenant.store&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> menuStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./menu.store&#39;</span>

<span class="token keyword">const</span> keyPrefix <span class="token operator">=</span> <span class="token string">&#39;__vuex__&#39;</span>

<span class="token keyword">const</span> vuexLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VuexPersistence</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>keyPrefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">local</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">storage</span><span class="token operator">:</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">,</span>
  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;authModule&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// only save user module</span>
  <span class="token function-variable function">filter</span><span class="token operator">:</span> <span class="token parameter">mutation</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> vuexSession <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VuexPersistence</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>keyPrefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">session</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">storage</span><span class="token operator">:</span> window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">,</span>
  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;themeModule&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tenantModule&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;menuModule&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// only save user module</span>
  <span class="token function-variable function">filter</span><span class="token operator">:</span> <span class="token parameter">mutation</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">authModule</span><span class="token operator">:</span> authStore<span class="token punctuation">,</span>
    <span class="token literal-property property">tenantModule</span><span class="token operator">:</span> tenantStore<span class="token punctuation">,</span>
    <span class="token literal-property property">themeModule</span><span class="token operator">:</span> themeStore<span class="token punctuation">,</span>
    <span class="token literal-property property">menuModule</span><span class="token operator">:</span> menuStore
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>vuexLocal<span class="token punctuation">.</span>plugin<span class="token punctuation">,</span> vuexSession<span class="token punctuation">.</span>plugin<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> end</h2><ul><li>加油！！</li></ul>`,5);function v(m,h){const s=o("ExternalLinkIcon");return l(),i("div",null,[c,n("ul",null,[n("li",null,[n("a",u,[a("vuex-persistedstate"),e(s)])]),n("li",null,[n("a",d,[a("vuex-persist"),e(s)])])]),k])}const y=p(r,[["render",v],["__file","5.有关Vuex的深度思考.html.vue"]]);export{y as default};
