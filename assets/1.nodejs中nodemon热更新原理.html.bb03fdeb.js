import{_ as t,r as c,o as p,c as i,a as n,b as s,d as e,e as o}from"./app.acfc35a6.js";const l="/onlineBlog/assets/image-20230208144939720.5db542ec.png",d="/onlineBlog/assets/20230208-152027.0ee7d94b.gif",r={},u=o('<h1 id="nodejs-中-nodemon-热更新原理" tabindex="-1"><a class="header-anchor" href="#nodejs-中-nodemon-热更新原理" aria-hidden="true">#</a> nodejs 中 nodemon 热更新原理</h1><h2 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h2><ul><li>我很早以前学习 nodejs 的时候，搭建了一个本地服务，每次本地修改代码完毕之后，需要手动重启服务。（非常繁琐）</li><li>然后就接触到了热更新这么一个概念，只需要安装一个依赖<code>nodemon</code>，然后利用这个依赖来启动服务，就能实现本地代码修改了，后台服务实时刷新。</li><li>今天来研究一下这里的热更新逻辑。</li></ul><h2 id="插件源码" tabindex="-1"><a class="header-anchor" href="#插件源码" aria-hidden="true">#</a> 插件源码</h2>',4),m={href:"https://github.com/remy/nodemon",target:"_blank",rel:"noopener noreferrer"},k=o('<p><img src="'+l+`" alt="image-20230208144939720"></p><p><code>官方解释：</code> nodemon 是一种工具，通过在检测到目录中的文件更改时自动重启节点应用程序来帮助开发基于 Node.js 的应用程序。</p><p>nodemon 不需要对您的代码或开发方法进行任何其他更改。nodemon 是 node. 要使用 nodemon，请在执行脚本时替换 node 命令行中的单词。</p><h2 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例" aria-hidden="true">#</a> 使用案例</h2><p>我使用 nodejs 自带的 http 模块搭建一个基础的本地服务，端口为 9527。代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;客户端请求了一次&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 启动服务器</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9527</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务器启动成功！&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常，我们是使用 <code>node main.js</code> 来执行对应的 js 文件的。</p><blockquote><p>这种方式并不支持代码实时更新。</p></blockquote><p>可以<code>npm i -g nodemon</code>然后下载完毕依赖后，使用 <code>nodemon ./main.js</code> 执行对应的 js 文件。后续在修改 <code>main.js</code> 的时候，无需重启服务，这个依赖会帮我们自动热更新。</p><p><img src="`+d+'" alt="20230208-152027"></p><h2 id="主干原理" tabindex="-1"><a class="header-anchor" href="#主干原理" aria-hidden="true">#</a> 主干原理</h2><ol><li>利用 <code>chokidar</code> 监听文件的改变。</li><li>重新运行<code>node ./main.js</code></li></ol><h2 id="博客" tabindex="-1"><a class="header-anchor" href="#博客" aria-hidden="true">#</a> 博客</h2>',13),h={href:"https://www.jianshu.com/p/0f4c531daa9a",target:"_blank",rel:"noopener noreferrer"};function v(_,b){const a=c("ExternalLinkIcon");return p(),i("div",null,[u,n("p",null,[s("nodemon github "),n("a",m,[s("源码地址"),e(a)])]),k,n("p",null,[n("a",h,[s("探索 nodemon 的实现（源码）"),e(a)])])])}const g=t(r,[["render",v],["__file","1.nodejs中nodemon热更新原理.html.vue"]]);export{g as default};
